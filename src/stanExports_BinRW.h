// Generated by rstantools.  Do not edit by hand.

/*
    EczemaPred is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EczemaPred is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EczemaPred.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_BinRW_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_BinRW");
    reader.add_event(5, 5, "include", "/include/data_lgtd_discrete.stan");
    reader.add_event(5, 0, "start", "/include/data_lgtd_discrete.stan");
    reader.add_event(7, 2, "include", "/include/data_lgtd.stan");
    reader.add_event(7, 0, "start", "/include/data_lgtd.stan");
    reader.add_event(18, 11, "end", "/include/data_lgtd.stan");
    reader.add_event(18, 3, "restart", "/include/data_lgtd_discrete.stan");
    reader.add_event(22, 7, "end", "/include/data_lgtd_discrete.stan");
    reader.add_event(22, 6, "restart", "model_BinRW");
    reader.add_event(32, 16, "include", "/include/tdata_lgtd.stan");
    reader.add_event(32, 0, "start", "/include/tdata_lgtd.stan");
    reader.add_event(66, 34, "end", "/include/tdata_lgtd.stan");
    reader.add_event(66, 17, "restart", "model_BinRW");
    reader.add_event(123, 72, "end", "model_BinRW");
    return reader;
}
#include <stan_meta_header.hpp>
class model_BinRW
  : public stan::model::model_base_crtp<model_BinRW> {
private:
        int N_obs;
        int N_pt;
        std::vector<int> k_obs;
        std::vector<int> t_obs;
        int N_test;
        std::vector<int> k_test;
        std::vector<int> t_test;
        int M;
        std::vector<int> y_obs;
        std::vector<int> y_test;
        std::vector<double> prior_sigma;
        std::vector<double> prior_mu_logit_y0;
        std::vector<double> prior_sigma_logit_y0;
        int run;
        std::vector<int> t_max;
        int N;
        std::vector<int> id_start;
        std::vector<int> id_end;
        std::vector<int> idx_obs;
        std::vector<int> idx_test;
public:
    model_BinRW(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_BinRW(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_BinRW_namespace::model_BinRW";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "N_obs", "int", context__.to_vec());
            N_obs = int(0);
            vals_i__ = context__.vals_i("N_obs");
            pos__ = 0;
            N_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_obs", N_obs, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "N_pt", "int", context__.to_vec());
            N_pt = int(0);
            vals_i__ = context__.vals_i("N_pt");
            pos__ = 0;
            N_pt = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_pt", N_pt, 0);
            current_statement_begin__ = 13;
            validate_non_negative_index("k_obs", "N_obs", N_obs);
            context__.validate_dims("data initialization", "k_obs", "int", context__.to_vec(N_obs));
            k_obs = std::vector<int>(N_obs, int(0));
            vals_i__ = context__.vals_i("k_obs");
            pos__ = 0;
            size_t k_obs_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < k_obs_k_0_max__; ++k_0__) {
                k_obs[k_0__] = vals_i__[pos__++];
            }
            size_t k_obs_i_0_max__ = N_obs;
            for (size_t i_0__ = 0; i_0__ < k_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "k_obs[i_0__]", k_obs[i_0__], 1);
                check_less_or_equal(function__, "k_obs[i_0__]", k_obs[i_0__], N_pt);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("t_obs", "N_obs", N_obs);
            context__.validate_dims("data initialization", "t_obs", "int", context__.to_vec(N_obs));
            t_obs = std::vector<int>(N_obs, int(0));
            vals_i__ = context__.vals_i("t_obs");
            pos__ = 0;
            size_t t_obs_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < t_obs_k_0_max__; ++k_0__) {
                t_obs[k_0__] = vals_i__[pos__++];
            }
            size_t t_obs_i_0_max__ = N_obs;
            for (size_t i_0__ = 0; i_0__ < t_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_obs[i_0__]", t_obs[i_0__], 1);
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "N_test", "int", context__.to_vec());
            N_test = int(0);
            vals_i__ = context__.vals_i("N_test");
            pos__ = 0;
            N_test = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_test", N_test, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("k_test", "N_test", N_test);
            context__.validate_dims("data initialization", "k_test", "int", context__.to_vec(N_test));
            k_test = std::vector<int>(N_test, int(0));
            vals_i__ = context__.vals_i("k_test");
            pos__ = 0;
            size_t k_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < k_test_k_0_max__; ++k_0__) {
                k_test[k_0__] = vals_i__[pos__++];
            }
            size_t k_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < k_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "k_test[i_0__]", k_test[i_0__], 1);
                check_less_or_equal(function__, "k_test[i_0__]", k_test[i_0__], N_pt);
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("t_test", "N_test", N_test);
            context__.validate_dims("data initialization", "t_test", "int", context__.to_vec(N_test));
            t_test = std::vector<int>(N_test, int(0));
            vals_i__ = context__.vals_i("t_test");
            pos__ = 0;
            size_t t_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < t_test_k_0_max__; ++k_0__) {
                t_test[k_0__] = vals_i__[pos__++];
            }
            size_t t_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < t_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_test[i_0__]", t_test[i_0__], 1);
            }
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 21;
            validate_non_negative_index("y_obs", "N_obs", N_obs);
            context__.validate_dims("data initialization", "y_obs", "int", context__.to_vec(N_obs));
            y_obs = std::vector<int>(N_obs, int(0));
            vals_i__ = context__.vals_i("y_obs");
            pos__ = 0;
            size_t y_obs_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < y_obs_k_0_max__; ++k_0__) {
                y_obs[k_0__] = vals_i__[pos__++];
            }
            size_t y_obs_i_0_max__ = N_obs;
            for (size_t i_0__ = 0; i_0__ < y_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_obs[i_0__]", y_obs[i_0__], 0);
                check_less_or_equal(function__, "y_obs[i_0__]", y_obs[i_0__], M);
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("y_test", "N_test", N_test);
            context__.validate_dims("data initialization", "y_test", "int", context__.to_vec(N_test));
            y_test = std::vector<int>(N_test, int(0));
            vals_i__ = context__.vals_i("y_test");
            pos__ = 0;
            size_t y_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < y_test_k_0_max__; ++k_0__) {
                y_test[k_0__] = vals_i__[pos__++];
            }
            size_t y_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < y_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_test[i_0__]", y_test[i_0__], 0);
                check_less_or_equal(function__, "y_test[i_0__]", y_test[i_0__], M);
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("prior_sigma", "2", 2);
            context__.validate_dims("data initialization", "prior_sigma", "double", context__.to_vec(2));
            prior_sigma = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("prior_sigma");
            pos__ = 0;
            size_t prior_sigma_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < prior_sigma_k_0_max__; ++k_0__) {
                prior_sigma[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 25;
            validate_non_negative_index("prior_mu_logit_y0", "2", 2);
            context__.validate_dims("data initialization", "prior_mu_logit_y0", "double", context__.to_vec(2));
            prior_mu_logit_y0 = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("prior_mu_logit_y0");
            pos__ = 0;
            size_t prior_mu_logit_y0_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < prior_mu_logit_y0_k_0_max__; ++k_0__) {
                prior_mu_logit_y0[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("prior_sigma_logit_y0", "2", 2);
            context__.validate_dims("data initialization", "prior_sigma_logit_y0", "double", context__.to_vec(2));
            prior_sigma_logit_y0 = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("prior_sigma_logit_y0");
            pos__ = 0;
            size_t prior_sigma_logit_y0_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < prior_sigma_logit_y0_k_0_max__; ++k_0__) {
                prior_sigma_logit_y0[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "run", "int", context__.to_vec());
            run = int(0);
            vals_i__ = context__.vals_i("run");
            pos__ = 0;
            run = vals_i__[pos__++];
            check_greater_or_equal(function__, "run", run, 0);
            check_less_or_equal(function__, "run", run, 1);
            // initialize transformed data variables
            current_statement_begin__ = 37;
            validate_non_negative_index("t_max", "N_pt", N_pt);
            t_max = std::vector<int>(N_pt, int(0));
            stan::math::fill(t_max, std::numeric_limits<int>::min());
            stan::math::assign(t_max,rep_array(0, N_pt));
            current_statement_begin__ = 38;
            N = int(0);
            stan::math::fill(N, std::numeric_limits<int>::min());
            current_statement_begin__ = 39;
            validate_non_negative_index("id_start", "N_pt", N_pt);
            id_start = std::vector<int>(N_pt, int(0));
            stan::math::fill(id_start, std::numeric_limits<int>::min());
            current_statement_begin__ = 40;
            validate_non_negative_index("id_end", "N_pt", N_pt);
            id_end = std::vector<int>(N_pt, int(0));
            stan::math::fill(id_end, std::numeric_limits<int>::min());
            current_statement_begin__ = 41;
            validate_non_negative_index("idx_obs", "N_obs", N_obs);
            idx_obs = std::vector<int>(N_obs, int(0));
            stan::math::fill(idx_obs, std::numeric_limits<int>::min());
            current_statement_begin__ = 42;
            validate_non_negative_index("idx_test", "N_test", N_test);
            idx_test = std::vector<int>(N_test, int(0));
            stan::math::fill(idx_test, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 44;
            for (int i = 1; i <= N_obs; ++i) {
                current_statement_begin__ = 45;
                stan::model::assign(t_max, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(k_obs, i, "k_obs", 1)), stan::model::nil_index_list()), 
                            std::max(get_base1(t_obs, i, "t_obs", 1), get_base1(t_max, get_base1(k_obs, i, "k_obs", 1), "t_max", 1)), 
                            "assigning variable t_max");
            }
            current_statement_begin__ = 47;
            for (int i = 1; i <= N_test; ++i) {
                current_statement_begin__ = 48;
                stan::model::assign(t_max, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(k_test, i, "k_test", 1)), stan::model::nil_index_list()), 
                            std::max(get_base1(t_test, i, "t_test", 1), get_base1(t_max, get_base1(k_test, i, "k_test", 1), "t_max", 1)), 
                            "assigning variable t_max");
            }
            current_statement_begin__ = 50;
            stan::math::assign(N, sum(t_max));
            current_statement_begin__ = 52;
            for (int k = 1; k <= N_pt; ++k) {
                current_statement_begin__ = 53;
                if (as_bool(logical_eq(k, 1))) {
                    current_statement_begin__ = 54;
                    stan::model::assign(id_start, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable id_start");
                } else {
                    current_statement_begin__ = 56;
                    stan::model::assign(id_start, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                (get_base1(id_end, (k - 1), "id_end", 1) + 1), 
                                "assigning variable id_start");
                }
                current_statement_begin__ = 58;
                stan::model::assign(id_end, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            ((get_base1(id_start, k, "id_start", 1) - 1) + get_base1(t_max, k, "t_max", 1)), 
                            "assigning variable id_end");
            }
            current_statement_begin__ = 61;
            for (int i = 1; i <= N_obs; ++i) {
                current_statement_begin__ = 62;
                stan::model::assign(idx_obs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(id_start, get_base1(k_obs, i, "k_obs", 1), "id_start", 1) - 1) + get_base1(t_obs, i, "t_obs", 1)), 
                            "assigning variable idx_obs");
            }
            current_statement_begin__ = 64;
            for (int i = 1; i <= N_test; ++i) {
                current_statement_begin__ = 65;
                stan::model::assign(idx_test, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(id_start, get_base1(k_test, i, "k_test", 1), "id_start", 1) - 1) + get_base1(t_test, i, "t_test", 1)), 
                            "assigning variable idx_test");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 70;
            validate_non_negative_index("eta", "N", N);
            num_params_r__ += (1 * N);
            current_statement_begin__ = 71;
            num_params_r__ += 1;
            current_statement_begin__ = 72;
            num_params_r__ += 1;
            current_statement_begin__ = 73;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_BinRW() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 70;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "N", N);
        context__.validate_dims("parameter initialization", "eta", "double", context__.to_vec(N));
        std::vector<double> eta(N, double(0));
        size_t eta_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
            eta[k_0__] = vals_r__[pos__++];
        }
        size_t eta_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < eta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(eta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 71;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 72;
        if (!(context__.contains_r("mu_logit_y0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_logit_y0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_logit_y0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_logit_y0", "double", context__.to_vec());
        double mu_logit_y0(0);
        mu_logit_y0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_logit_y0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_logit_y0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 73;
        if (!(context__.contains_r("sigma_logit_y0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_logit_y0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_logit_y0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_logit_y0", "double", context__.to_vec());
        double sigma_logit_y0(0);
        sigma_logit_y0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_logit_y0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_logit_y0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 70;
            std::vector<local_scalar_t__> eta;
            size_t eta_d_0_max__ = N;
            eta.reserve(eta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    eta.push_back(in__.scalar_constrain(lp__));
                else
                    eta.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 71;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 72;
            local_scalar_t__ mu_logit_y0;
            (void) mu_logit_y0;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_logit_y0 = in__.scalar_constrain(lp__);
            else
                mu_logit_y0 = in__.scalar_constrain();
            current_statement_begin__ = 73;
            local_scalar_t__ sigma_logit_y0;
            (void) sigma_logit_y0;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_logit_y0 = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_logit_y0 = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 77;
            validate_non_negative_index("logit_lat", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_lat(N);
            stan::math::initialize(logit_lat, DUMMY_VAR__);
            stan::math::fill(logit_lat, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("y_lat", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y_lat(N);
            stan::math::initialize(y_lat, DUMMY_VAR__);
            stan::math::fill(y_lat, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("logit_y0", "N_pt", N_pt);
            std::vector<local_scalar_t__> logit_y0(N_pt, local_scalar_t__(0));
            stan::math::initialize(logit_y0, DUMMY_VAR__);
            stan::math::fill(logit_y0, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 81;
            for (int k = 1; k <= N_pt; ++k) {
                current_statement_begin__ = 82;
                stan::model::assign(logit_y0, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            (mu_logit_y0 + (sigma_logit_y0 * get_base1(eta, get_base1(id_start, k, "id_start", 1), "eta", 1))), 
                            "assigning variable logit_y0");
                current_statement_begin__ = 83;
                stan::model::assign(logit_lat, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(id_start, k, "id_start", 1)), stan::model::nil_index_list()), 
                            get_base1(logit_y0, k, "logit_y0", 1), 
                            "assigning variable logit_lat");
                current_statement_begin__ = 84;
                for (int t = (get_base1(id_start, k, "id_start", 1) + 1); t <= get_base1(id_end, k, "id_end", 1); ++t) {
                    current_statement_begin__ = 85;
                    stan::model::assign(logit_lat, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (get_base1(logit_lat, (t - 1), "logit_lat", 1) + (sigma * get_base1(eta, t, "eta", 1))), 
                                "assigning variable logit_lat");
                }
            }
            current_statement_begin__ = 88;
            stan::math::assign(y_lat, inv_logit(logit_lat));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 77;
            size_t logit_lat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_lat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_lat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_lat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_lat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 78;
            size_t y_lat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_lat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(y_lat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y_lat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y_lat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 79;
            size_t logit_y0_k_0_max__ = N_pt;
            for (size_t k_0__ = 0; k_0__ < logit_y0_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(logit_y0[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_y0" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_y0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 92;
            lp_accum__.add(std_normal_log<propto__>(eta));
            current_statement_begin__ = 94;
            lp_accum__.add(normal_log<propto__>(sigma, get_base1(prior_sigma, 1, "prior_sigma", 1), get_base1(prior_sigma, 2, "prior_sigma", 1)));
            current_statement_begin__ = 95;
            lp_accum__.add(normal_log<propto__>(mu_logit_y0, get_base1(prior_mu_logit_y0, 1, "prior_mu_logit_y0", 1), get_base1(prior_mu_logit_y0, 2, "prior_mu_logit_y0", 1)));
            current_statement_begin__ = 96;
            lp_accum__.add(normal_log<propto__>(sigma_logit_y0, get_base1(prior_sigma_logit_y0, 1, "prior_sigma_logit_y0", 1), get_base1(prior_sigma_logit_y0, 2, "prior_sigma_logit_y0", 1)));
            current_statement_begin__ = 98;
            if (as_bool(logical_eq(run, 1))) {
                current_statement_begin__ = 99;
                lp_accum__.add(binomial_log<propto__>(y_obs, M, stan::model::rvalue(y_lat, stan::model::cons_list(stan::model::index_multi(idx_obs), stan::model::nil_index_list()), "y_lat")));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("eta");
        names__.push_back("sigma");
        names__.push_back("mu_logit_y0");
        names__.push_back("sigma_logit_y0");
        names__.push_back("logit_lat");
        names__.push_back("y_lat");
        names__.push_back("logit_y0");
        names__.push_back("y_rep");
        names__.push_back("lpd");
        names__.push_back("cum_err");
        names__.push_back("y_pred");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_test);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_test);
        dims__.push_back((M + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_test);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_BinRW_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> eta;
        size_t eta_d_0_max__ = N;
        eta.reserve(eta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
            eta.push_back(in__.scalar_constrain());
        }
        size_t eta_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
            vars__.push_back(eta[k_0__]);
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double mu_logit_y0 = in__.scalar_constrain();
        vars__.push_back(mu_logit_y0);
        double sigma_logit_y0 = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_logit_y0);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 77;
            validate_non_negative_index("logit_lat", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_lat(N);
            stan::math::initialize(logit_lat, DUMMY_VAR__);
            stan::math::fill(logit_lat, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("y_lat", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> y_lat(N);
            stan::math::initialize(y_lat, DUMMY_VAR__);
            stan::math::fill(y_lat, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("logit_y0", "N_pt", N_pt);
            std::vector<double> logit_y0(N_pt, double(0));
            stan::math::initialize(logit_y0, DUMMY_VAR__);
            stan::math::fill(logit_y0, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 81;
            for (int k = 1; k <= N_pt; ++k) {
                current_statement_begin__ = 82;
                stan::model::assign(logit_y0, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            (mu_logit_y0 + (sigma_logit_y0 * get_base1(eta, get_base1(id_start, k, "id_start", 1), "eta", 1))), 
                            "assigning variable logit_y0");
                current_statement_begin__ = 83;
                stan::model::assign(logit_lat, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(id_start, k, "id_start", 1)), stan::model::nil_index_list()), 
                            get_base1(logit_y0, k, "logit_y0", 1), 
                            "assigning variable logit_lat");
                current_statement_begin__ = 84;
                for (int t = (get_base1(id_start, k, "id_start", 1) + 1); t <= get_base1(id_end, k, "id_end", 1); ++t) {
                    current_statement_begin__ = 85;
                    stan::model::assign(logit_lat, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (get_base1(logit_lat, (t - 1), "logit_lat", 1) + (sigma * get_base1(eta, t, "eta", 1))), 
                                "assigning variable logit_lat");
                }
            }
            current_statement_begin__ = 88;
            stan::math::assign(y_lat, inv_logit(logit_lat));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t logit_lat_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < logit_lat_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_lat(j_1__));
                }
                size_t y_lat_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < y_lat_j_1_max__; ++j_1__) {
                    vars__.push_back(y_lat(j_1__));
                }
                size_t logit_y0_k_0_max__ = N_pt;
                for (size_t k_0__ = 0; k_0__ < logit_y0_k_0_max__; ++k_0__) {
                    vars__.push_back(logit_y0[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 104;
            validate_non_negative_index("y_rep", "N", N);
            std::vector<double> y_rep(N, double(0));
            stan::math::initialize(y_rep, DUMMY_VAR__);
            stan::math::fill(y_rep, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("lpd", "N_test", N_test);
            std::vector<double> lpd(N_test, double(0));
            stan::math::initialize(lpd, DUMMY_VAR__);
            stan::math::fill(lpd, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("cum_err", "N_test", N_test);
            validate_non_negative_index("cum_err", "(M + 1)", (M + 1));
            std::vector<std::vector<double> > cum_err(N_test, std::vector<double>((M + 1), double(0)));
            stan::math::initialize(cum_err, DUMMY_VAR__);
            stan::math::fill(cum_err, DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("y_pred", "N_test", N_test);
            std::vector<double> y_pred(N_test, double(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 109;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 110;
                stan::model::assign(y_rep, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            binomial_rng(M, get_base1(y_lat, i, "y_lat", 1), base_rng__), 
                            "assigning variable y_rep");
            }
            current_statement_begin__ = 112;
            stan::math::assign(y_pred, stan::model::rvalue(y_rep, stan::model::cons_list(stan::model::index_multi(idx_test), stan::model::nil_index_list()), "y_rep"));
            current_statement_begin__ = 114;
            for (int i = 1; i <= N_test; ++i) {
                current_statement_begin__ = 115;
                stan::model::assign(lpd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            binomial_log(get_base1(y_test, i, "y_test", 1), M, get_base1(y_lat, get_base1(idx_test, i, "idx_test", 1), "y_lat", 1)), 
                            "assigning variable lpd");
                current_statement_begin__ = 116;
                for (int j = 0; j <= M; ++j) {
                    current_statement_begin__ = 117;
                    stan::model::assign(cum_err, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((j + 1)), stan::model::nil_index_list())), 
                                (binomial_cdf(j, M, get_base1(y_lat, get_base1(idx_test, i, "idx_test", 1), "y_lat", 1)) - step((j - get_base1(y_test, i, "y_test", 1)))), 
                                "assigning variable cum_err");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 104;
            size_t y_rep_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
                vars__.push_back(y_rep[k_0__]);
            }
            current_statement_begin__ = 105;
            size_t lpd_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
                vars__.push_back(lpd[k_0__]);
            }
            current_statement_begin__ = 106;
            size_t cum_err_k_0_max__ = N_test;
            size_t cum_err_k_1_max__ = (M + 1);
            for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                    vars__.push_back(cum_err[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 107;
            size_t y_pred_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                vars__.push_back(y_pred[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_BinRW";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_logit_y0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_logit_y0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logit_lat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_lat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_lat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t y_lat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_lat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_lat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_y0_k_0_max__ = N_pt;
            for (size_t k_0__ = 0; k_0__ < logit_y0_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_y0" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lpd_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lpd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cum_err_k_0_max__ = N_test;
        size_t cum_err_k_1_max__ = (M + 1);
        for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cum_err" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t y_pred_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_logit_y0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_logit_y0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logit_lat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_lat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_lat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t y_lat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_lat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_lat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_y0_k_0_max__ = N_pt;
            for (size_t k_0__ = 0; k_0__ < logit_y0_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_y0" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lpd_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lpd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cum_err_k_0_max__ = N_test;
        size_t cum_err_k_1_max__ = (M + 1);
        for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cum_err" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t y_pred_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_BinRW_namespace::model_BinRW stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
