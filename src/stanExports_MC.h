// Generated by rstantools.  Do not edit by hand.

/*
    EczemaPred is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EczemaPred is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EczemaPred.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_MC_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_MC");
    reader.add_event(95, 93, "end", "model_MC");
    return reader;
}
#include <stan_meta_header.hpp>
class model_MC
  : public stan::model::model_base_crtp<model_MC> {
private:
        int K;
        int N;
        std::vector<int> y0;
        std::vector<int> y1;
        std::vector<int> dt;
        std::vector<std::vector<double> > prior_p;
        int run;
        int N_test;
        std::vector<int> y0_test;
        std::vector<int> y1_test;
        std::vector<int> dt_test;
        int M;
        std::vector<std::vector<std::vector<int> > > y;
public:
    model_MC(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_MC(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_MC_namespace::model_MC";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 7;
            validate_non_negative_index("y0", "N", N);
            context__.validate_dims("data initialization", "y0", "int", context__.to_vec(N));
            y0 = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y0");
            pos__ = 0;
            size_t y0_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y0_k_0_max__; ++k_0__) {
                y0[k_0__] = vals_i__[pos__++];
            }
            size_t y0_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y0_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y0[i_0__]", y0[i_0__], 1);
                check_less_or_equal(function__, "y0[i_0__]", y0[i_0__], K);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("y1", "N", N);
            context__.validate_dims("data initialization", "y1", "int", context__.to_vec(N));
            y1 = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y1");
            pos__ = 0;
            size_t y1_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y1_k_0_max__; ++k_0__) {
                y1[k_0__] = vals_i__[pos__++];
            }
            size_t y1_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y1_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y1[i_0__]", y1[i_0__], 1);
                check_less_or_equal(function__, "y1[i_0__]", y1[i_0__], K);
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("dt", "N", N);
            context__.validate_dims("data initialization", "dt", "int", context__.to_vec(N));
            dt = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("dt");
            pos__ = 0;
            size_t dt_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < dt_k_0_max__; ++k_0__) {
                dt[k_0__] = vals_i__[pos__++];
            }
            size_t dt_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < dt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt[i_0__]", dt[i_0__], 1);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("prior_p", "K", K);
            validate_non_negative_index("prior_p", "K", K);
            context__.validate_dims("data initialization", "prior_p", "double", context__.to_vec(K,K));
            prior_p = std::vector<std::vector<double> >(K, std::vector<double>(K, double(0)));
            vals_r__ = context__.vals_r("prior_p");
            pos__ = 0;
            size_t prior_p_k_0_max__ = K;
            size_t prior_p_k_1_max__ = K;
            for (size_t k_1__ = 0; k_1__ < prior_p_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_p_k_0_max__; ++k_0__) {
                    prior_p[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t prior_p_i_0_max__ = K;
            size_t prior_p_i_1_max__ = K;
            for (size_t i_0__ = 0; i_0__ < prior_p_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < prior_p_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "prior_p[i_0__][i_1__]", prior_p[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "run", "int", context__.to_vec());
            run = int(0);
            vals_i__ = context__.vals_i("run");
            pos__ = 0;
            run = vals_i__[pos__++];
            check_greater_or_equal(function__, "run", run, 0);
            check_less_or_equal(function__, "run", run, 1);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "N_test", "int", context__.to_vec());
            N_test = int(0);
            vals_i__ = context__.vals_i("N_test");
            pos__ = 0;
            N_test = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_test", N_test, 0);
            current_statement_begin__ = 15;
            validate_non_negative_index("y0_test", "N_test", N_test);
            context__.validate_dims("data initialization", "y0_test", "int", context__.to_vec(N_test));
            y0_test = std::vector<int>(N_test, int(0));
            vals_i__ = context__.vals_i("y0_test");
            pos__ = 0;
            size_t y0_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < y0_test_k_0_max__; ++k_0__) {
                y0_test[k_0__] = vals_i__[pos__++];
            }
            size_t y0_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < y0_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y0_test[i_0__]", y0_test[i_0__], 1);
                check_less_or_equal(function__, "y0_test[i_0__]", y0_test[i_0__], K);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("y1_test", "N_test", N_test);
            context__.validate_dims("data initialization", "y1_test", "int", context__.to_vec(N_test));
            y1_test = std::vector<int>(N_test, int(0));
            vals_i__ = context__.vals_i("y1_test");
            pos__ = 0;
            size_t y1_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < y1_test_k_0_max__; ++k_0__) {
                y1_test[k_0__] = vals_i__[pos__++];
            }
            size_t y1_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < y1_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y1_test[i_0__]", y1_test[i_0__], 1);
                check_less_or_equal(function__, "y1_test[i_0__]", y1_test[i_0__], K);
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("dt_test", "N_test", N_test);
            context__.validate_dims("data initialization", "dt_test", "int", context__.to_vec(N_test));
            dt_test = std::vector<int>(N_test, int(0));
            vals_i__ = context__.vals_i("dt_test");
            pos__ = 0;
            size_t dt_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < dt_test_k_0_max__; ++k_0__) {
                dt_test[k_0__] = vals_i__[pos__++];
            }
            size_t dt_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < dt_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt_test[i_0__]", dt_test[i_0__], 1);
            }
            // initialize transformed data variables
            current_statement_begin__ = 21;
            M = int(0);
            stan::math::fill(M, std::numeric_limits<int>::min());
            stan::math::assign(M,max(append_array(dt, append_array(static_cast<std::vector<int> >(stan::math::array_builder<int >().add(1).array()), dt_test))));
            current_statement_begin__ = 22;
            validate_non_negative_index("y", "K", K);
            validate_non_negative_index("y", "M", M);
            validate_non_negative_index("y", "K", K);
            y = std::vector<std::vector<std::vector<int> > >(K, std::vector<std::vector<int> >(M, std::vector<int>(K, int(0))));
            stan::math::fill(y, std::numeric_limits<int>::min());
            stan::math::assign(y,rep_array(0, K, M, K));
            // execute transformed data statements
            current_statement_begin__ = 24;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 25;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(y0, i, "y0", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(dt, i, "dt", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(y1, i, "y1", 1)), stan::model::nil_index_list()))), 
                            (stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(get_base1(y0, i, "y0", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(dt, i, "dt", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(y1, i, "y1", 1)), stan::model::nil_index_list()))), "y") + 1), 
                            "assigning variable y");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 31;
            validate_non_negative_index("p", "K", K);
            validate_non_negative_index("p", "K", K);
            num_params_r__ += ((K - 1) * K);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_MC() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 31;
        if (!(context__.contains_r("p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p");
        pos__ = 0U;
        validate_non_negative_index("p", "K", K);
        validate_non_negative_index("p", "K", K);
        context__.validate_dims("parameter initialization", "p", "vector_d", context__.to_vec(K,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > p(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t p_j_1_max__ = K;
        size_t p_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                p[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t p_i_0_max__ = K;
        for (size_t i_0__ = 0; i_0__ < p_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(p[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 31;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > p;
            size_t p_d_0_max__ = K;
            p.reserve(p_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < p_d_0_max__; ++d_0__) {
                if (jacobian__)
                    p.push_back(in__.simplex_constrain(K, lp__));
                else
                    p.push_back(in__.simplex_constrain(K));
            }
            // transformed parameters
            current_statement_begin__ = 35;
            validate_non_negative_index("P", "K", K);
            validate_non_negative_index("P", "K", K);
            validate_non_negative_index("P", "M", M);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > P(M, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(K, K));
            stan::math::initialize(P, DUMMY_VAR__);
            stan::math::fill(P, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 37;
            if (as_bool(logical_gt(M, 0))) {
                current_statement_begin__ = 39;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 40;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                to_row_vector(get_base1(p, k, "p", 1)), 
                                "assigning variable P");
                }
                current_statement_begin__ = 43;
                for (int i = 2; i <= M; ++i) {
                    current_statement_begin__ = 44;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                multiply(get_base1(P, 1, "P", 1), get_base1(P, (i - 1), "P", 1)), 
                                "assigning variable P");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 35;
            size_t P_k_0_max__ = M;
            size_t P_j_1_max__ = K;
            size_t P_j_2_max__ = K;
            for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(P[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: P" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable P: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            current_statement_begin__ = 52;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 53;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(p, k, "p", 1), to_vector(get_base1(prior_p, k, "prior_p", 1))));
            }
            current_statement_begin__ = 57;
            if (as_bool(logical_eq(run, 1))) {
                current_statement_begin__ = 58;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 59;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 60;
                        if (as_bool(logical_gt(sum(get_base1(get_base1(y, k, "y", 1), m, "y", 2)), 0))) {
                            current_statement_begin__ = 61;
                            lp_accum__.add(multinomial_log<propto__>(get_base1(get_base1(y, k, "y", 1), m, "y", 2), to_vector(get_base1(get_base1(P, m, "P", 1), k, "P", 2))));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("p");
        names__.push_back("P");
        names__.push_back("y_rep");
        names__.push_back("y_pred");
        names__.push_back("lpd");
        names__.push_back("cum_err");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_test);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_test);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_test);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_MC_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > p;
        size_t p_d_0_max__ = K;
        p.reserve(p_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < p_d_0_max__; ++d_0__) {
            p.push_back(in__.simplex_constrain(K));
        }
        size_t p_j_1_max__ = K;
        size_t p_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                vars__.push_back(p[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 35;
            validate_non_negative_index("P", "K", K);
            validate_non_negative_index("P", "K", K);
            validate_non_negative_index("P", "M", M);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > P(M, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, K));
            stan::math::initialize(P, DUMMY_VAR__);
            stan::math::fill(P, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 37;
            if (as_bool(logical_gt(M, 0))) {
                current_statement_begin__ = 39;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 40;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                to_row_vector(get_base1(p, k, "p", 1)), 
                                "assigning variable P");
                }
                current_statement_begin__ = 43;
                for (int i = 2; i <= M; ++i) {
                    current_statement_begin__ = 44;
                    stan::model::assign(P, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                multiply(get_base1(P, 1, "P", 1), get_base1(P, (i - 1), "P", 1)), 
                                "assigning variable P");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t P_j_2_max__ = K;
                size_t P_j_1_max__ = K;
                size_t P_k_0_max__ = M;
                for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                            vars__.push_back(P[k_0__](j_1__, j_2__));
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 70;
            validate_non_negative_index("y_rep", "N", N);
            std::vector<double> y_rep(N, double(0));
            stan::math::initialize(y_rep, DUMMY_VAR__);
            stan::math::fill(y_rep, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("y_pred", "N_test", N_test);
            std::vector<double> y_pred(N_test, double(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("lpd", "N_test", N_test);
            std::vector<double> lpd(N_test, double(0));
            stan::math::initialize(lpd, DUMMY_VAR__);
            stan::math::fill(lpd, DUMMY_VAR__);
            current_statement_begin__ = 73;
            validate_non_negative_index("cum_err", "N_test", N_test);
            validate_non_negative_index("cum_err", "K", K);
            std::vector<std::vector<double> > cum_err(N_test, std::vector<double>(K, double(0)));
            stan::math::initialize(cum_err, DUMMY_VAR__);
            stan::math::fill(cum_err, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 75;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 76;
                stan::model::assign(y_rep, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            categorical_rng(to_vector(get_base1(get_base1(P, get_base1(dt, i, "dt", 1), "P", 1), get_base1(y0, i, "y0", 1), "P", 2)), base_rng__), 
                            "assigning variable y_rep");
            }
            {
            current_statement_begin__ = 80;
            validate_non_negative_index("theta", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(K);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 81;
            validate_non_negative_index("cdf", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cdf(K);
            stan::math::initialize(cdf, DUMMY_VAR__);
            stan::math::fill(cdf, DUMMY_VAR__);
            current_statement_begin__ = 82;
            for (int i = 1; i <= N_test; ++i) {
                current_statement_begin__ = 83;
                stan::math::assign(theta, to_vector(get_base1(get_base1(P, get_base1(dt_test, i, "dt_test", 1), "P", 1), get_base1(y0_test, i, "y0_test", 1), "P", 2)));
                current_statement_begin__ = 84;
                stan::model::assign(y_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            categorical_rng(theta, base_rng__), 
                            "assigning variable y_pred");
                current_statement_begin__ = 85;
                stan::model::assign(lpd, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(theta, get_base1(y1_test, i, "y1_test", 1), "theta", 1)), 
                            "assigning variable lpd");
                current_statement_begin__ = 86;
                stan::math::assign(cdf, cumulative_sum(theta));
                current_statement_begin__ = 87;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 88;
                    stan::model::assign(cum_err, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                                (get_base1(cdf, k, "cdf", 1) - step((k - get_base1(y1_test, i, "y1_test", 1)))), 
                                "assigning variable cum_err");
                }
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 70;
            size_t y_rep_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
                vars__.push_back(y_rep[k_0__]);
            }
            current_statement_begin__ = 71;
            size_t y_pred_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                vars__.push_back(y_pred[k_0__]);
            }
            current_statement_begin__ = 72;
            size_t lpd_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
                vars__.push_back(lpd[k_0__]);
            }
            current_statement_begin__ = 73;
            size_t cum_err_k_0_max__ = N_test;
            size_t cum_err_k_1_max__ = K;
            for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                    vars__.push_back(cum_err[k_0__][k_1__]);
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_MC";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t p_j_1_max__ = K;
        size_t p_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t P_j_2_max__ = K;
            size_t P_j_1_max__ = K;
            size_t P_k_0_max__ = M;
            for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "P" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_pred_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lpd_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lpd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cum_err_k_0_max__ = N_test;
        size_t cum_err_k_1_max__ = K;
        for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cum_err" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t p_j_1_max__ = (K - 1);
        size_t p_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t P_j_2_max__ = K;
            size_t P_j_1_max__ = K;
            size_t P_k_0_max__ = M;
            for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < P_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "P" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_pred_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lpd_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lpd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cum_err_k_0_max__ = N_test;
        size_t cum_err_k_1_max__ = K;
        for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cum_err" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_MC_namespace::model_MC stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
