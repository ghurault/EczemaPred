// Generated by rstantools.  Do not edit by hand.

/*
    EczemaPred is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EczemaPred is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EczemaPred.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_RW_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_RW");
    reader.add_event(6, 6, "include", "/include/bin_search.stan");
    reader.add_event(6, 0, "start", "/include/bin_search.stan");
    reader.add_event(23, 17, "end", "/include/bin_search.stan");
    reader.add_event(23, 7, "restart", "model_RW");
    reader.add_event(23, 7, "include", "/include/truncated_normal.stan");
    reader.add_event(23, 0, "start", "/include/truncated_normal.stan");
    reader.add_event(51, 28, "end", "/include/truncated_normal.stan");
    reader.add_event(51, 8, "restart", "model_RW");
    reader.add_event(51, 8, "include", "/include/discrete_normal.stan");
    reader.add_event(51, 0, "start", "/include/discrete_normal.stan");
    reader.add_event(93, 42, "end", "/include/discrete_normal.stan");
    reader.add_event(93, 9, "restart", "model_RW");
    reader.add_event(96, 12, "include", "/include/data_lgtd.stan");
    reader.add_event(96, 0, "start", "/include/data_lgtd.stan");
    reader.add_event(107, 11, "end", "/include/data_lgtd.stan");
    reader.add_event(107, 13, "restart", "model_RW");
    reader.add_event(121, 27, "include", "/include/tdata_lgtd.stan");
    reader.add_event(121, 0, "start", "/include/tdata_lgtd.stan");
    reader.add_event(155, 34, "end", "/include/tdata_lgtd.stan");
    reader.add_event(155, 28, "restart", "model_RW");
    reader.add_event(172, 45, "include", "/include/tparameters_missing.stan");
    reader.add_event(172, 0, "start", "/include/tparameters_missing.stan");
    reader.add_event(186, 14, "end", "/include/tparameters_missing.stan");
    reader.add_event(186, 46, "restart", "model_RW");
    reader.add_event(260, 118, "end", "model_RW");
    return reader;
}
template <typename T0__>
int
bin_search(const T0__& x,
               const int& min_val,
               const int& max_val, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        int range(0);
        (void) range;  // dummy to suppress unused var warning
        stan::math::fill(range, std::numeric_limits<int>::min());
        stan::math::assign(range,divide(((max_val - min_val) + 1), 2));
        current_statement_begin__ = 11;
        int mid_pt(0);
        (void) mid_pt;  // dummy to suppress unused var warning
        stan::math::fill(mid_pt, std::numeric_limits<int>::min());
        stan::math::assign(mid_pt,(min_val + range));
        current_statement_begin__ = 12;
        local_scalar_t__ y(DUMMY_VAR__);
        (void) y;  // dummy to suppress unused var warning
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,stan::math::round(x));
        current_statement_begin__ = 14;
        while (as_bool(logical_gt(range, 0))) {
            current_statement_begin__ = 15;
            if (as_bool(logical_eq(y, mid_pt))) {
                current_statement_begin__ = 16;
                stan::math::assign(range, 0);
            } else {
                current_statement_begin__ = 18;
                stan::math::assign(range, divide((range + 1), 2));
                current_statement_begin__ = 19;
                stan::math::assign(mid_pt, (mid_pt + (logical_gt(y, mid_pt) ? range : -(range) )));
            }
        }
        current_statement_begin__ = 22;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mid_pt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct bin_search_functor__ {
    template <typename T0__>
        int
    operator()(const T0__& x,
               const int& min_val,
               const int& max_val, std::ostream* pstream__) const {
        return bin_search(x, min_val, max_val, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
truncated_normal_lpdf(const T0__& y,
                          const T1__& M,
                          const T2__& mu,
                          const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 33;
        local_scalar_t__ Z(DUMMY_VAR__);
        (void) Z;  // dummy to suppress unused var warning
        stan::math::initialize(Z, DUMMY_VAR__);
        stan::math::fill(Z, DUMMY_VAR__);
        stan::math::assign(Z,(normal_cdf(M, mu, sigma) - normal_cdf(0, mu, sigma)));
        current_statement_begin__ = 34;
        local_scalar_t__ f(DUMMY_VAR__);
        (void) f;  // dummy to suppress unused var warning
        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f, DUMMY_VAR__);
        stan::math::assign(f,normal_log(y, mu, sigma));
        current_statement_begin__ = 35;
        return stan::math::promote_scalar<fun_return_scalar_t__>((f - stan::math::log(Z)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
truncated_normal_lpdf(const T0__& y,
                          const T1__& M,
                          const T2__& mu,
                          const T3__& sigma, std::ostream* pstream__) {
    return truncated_normal_lpdf<false>(y,M,mu,sigma, pstream__);
}
struct truncated_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
                          const T1__& M,
                          const T2__& mu,
                          const T3__& sigma, std::ostream* pstream__) const {
        return truncated_normal_lpdf(y, M, mu, sigma, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
truncated_normal_rng(const T0__& M,
                         const T1__& mu,
                         const T2__& sigma, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 46;
        local_scalar_t__ p1(DUMMY_VAR__);
        (void) p1;  // dummy to suppress unused var warning
        stan::math::initialize(p1, DUMMY_VAR__);
        stan::math::fill(p1, DUMMY_VAR__);
        stan::math::assign(p1,normal_cdf(0, mu, sigma));
        current_statement_begin__ = 47;
        local_scalar_t__ p2(DUMMY_VAR__);
        (void) p2;  // dummy to suppress unused var warning
        stan::math::initialize(p2, DUMMY_VAR__);
        stan::math::fill(p2, DUMMY_VAR__);
        stan::math::assign(p2,normal_cdf(M, mu, sigma));
        current_statement_begin__ = 48;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        stan::math::assign(u,uniform_rng(p1, p2, base_rng__));
        current_statement_begin__ = 49;
        local_scalar_t__ x(DUMMY_VAR__);
        (void) x;  // dummy to suppress unused var warning
        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x, DUMMY_VAR__);
        stan::math::assign(x,((sigma * inv_Phi(u)) + mu));
        current_statement_begin__ = 50;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct truncated_normal_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& M,
                         const T1__& mu,
                         const T2__& sigma, RNG& base_rng__, std::ostream* pstream__) const {
        return truncated_normal_rng(M, mu, sigma, base_rng__, pstream__);
    }
};
template <bool propto, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T2__, T3__>::type
discrete_normal_lpmf(const int& y,
                         const int& M,
                         const T2__& mu,
                         const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 61;
        local_scalar_t__ Z(DUMMY_VAR__);
        (void) Z;  // dummy to suppress unused var warning
        stan::math::initialize(Z, DUMMY_VAR__);
        stan::math::fill(Z, DUMMY_VAR__);
        stan::math::assign(Z,(normal_cdf(M, mu, sigma) - normal_cdf(0, mu, sigma)));
        current_statement_begin__ = 62;
        local_scalar_t__ f(DUMMY_VAR__);
        (void) f;  // dummy to suppress unused var warning
        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f, DUMMY_VAR__);
        stan::math::assign(f,(normal_cdf(stan::math::fmin((y + 0.5), M), mu, sigma) - normal_cdf(stan::math::fmax((y - 0.5), 0), mu, sigma)));
        current_statement_begin__ = 63;
        return stan::math::promote_scalar<fun_return_scalar_t__>((stan::math::log(f) - stan::math::log(Z)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T2__, typename T3__>
typename boost::math::tools::promote_args<T2__, T3__>::type
discrete_normal_lpmf(const int& y,
                         const int& M,
                         const T2__& mu,
                         const T3__& sigma, std::ostream* pstream__) {
    return discrete_normal_lpmf<false>(y,M,mu,sigma, pstream__);
}
struct discrete_normal_lpmf_functor__ {
    template <bool propto, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T2__, T3__>::type
    operator()(const int& y,
                         const int& M,
                         const T2__& mu,
                         const T3__& sigma, std::ostream* pstream__) const {
        return discrete_normal_lpmf(y, M, mu, sigma, pstream__);
    }
};
template <typename T2__, typename T3__>
typename boost::math::tools::promote_args<T2__, T3__>::type
discrete_normal_cdf(const int& y,
                        const int& M,
                        const T2__& mu,
                        const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 75;
        local_scalar_t__ Z(DUMMY_VAR__);
        (void) Z;  // dummy to suppress unused var warning
        stan::math::initialize(Z, DUMMY_VAR__);
        stan::math::fill(Z, DUMMY_VAR__);
        stan::math::assign(Z,(normal_cdf(M, mu, sigma) - normal_cdf(0, mu, sigma)));
        current_statement_begin__ = 76;
        local_scalar_t__ f(DUMMY_VAR__);
        (void) f;  // dummy to suppress unused var warning
        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f, DUMMY_VAR__);
        stan::math::assign(f,(normal_cdf(stan::math::fmin((y + 0.5), M), mu, sigma) - normal_cdf(0, mu, sigma)));
        current_statement_begin__ = 77;
        return stan::math::promote_scalar<fun_return_scalar_t__>((f / Z));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct discrete_normal_cdf_functor__ {
    template <typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T2__, T3__>::type
    operator()(const int& y,
                        const int& M,
                        const T2__& mu,
                        const T3__& sigma, std::ostream* pstream__) const {
        return discrete_normal_cdf(y, M, mu, sigma, pstream__);
    }
};
template <typename T1__, typename T2__, class RNG>
typename boost::math::tools::promote_args<T1__, T2__>::type
discrete_normal_rng(const int& M,
                        const T1__& mu,
                        const T2__& sigma, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 88;
        local_scalar_t__ p1(DUMMY_VAR__);
        (void) p1;  // dummy to suppress unused var warning
        stan::math::initialize(p1, DUMMY_VAR__);
        stan::math::fill(p1, DUMMY_VAR__);
        stan::math::assign(p1,normal_cdf(0, mu, sigma));
        current_statement_begin__ = 89;
        local_scalar_t__ p2(DUMMY_VAR__);
        (void) p2;  // dummy to suppress unused var warning
        stan::math::initialize(p2, DUMMY_VAR__);
        stan::math::fill(p2, DUMMY_VAR__);
        stan::math::assign(p2,normal_cdf(M, mu, sigma));
        current_statement_begin__ = 90;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        stan::math::assign(u,uniform_rng(p1, p2, base_rng__));
        current_statement_begin__ = 91;
        local_scalar_t__ x(DUMMY_VAR__);
        (void) x;  // dummy to suppress unused var warning
        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x, DUMMY_VAR__);
        stan::math::assign(x,((sigma * inv_Phi(u)) + mu));
        current_statement_begin__ = 92;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::round(x));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct discrete_normal_rng_functor__ {
    template <typename T1__, typename T2__, class RNG>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const int& M,
                        const T1__& mu,
                        const T2__& sigma, RNG& base_rng__, std::ostream* pstream__) const {
        return discrete_normal_rng(M, mu, sigma, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_RW
  : public stan::model::model_base_crtp<model_RW> {
private:
        int N_obs;
        int N_pt;
        std::vector<int> k_obs;
        std::vector<int> t_obs;
        int N_test;
        std::vector<int> k_test;
        std::vector<int> t_test;
        int M;
        std::vector<double> prior_sigma;
        int discrete;
        std::vector<double> y_obs;
        std::vector<double> y_test;
        int N_mis;
        std::vector<int> yi_test;
        std::vector<int> t_max;
        int N;
        std::vector<int> id_start;
        std::vector<int> id_end;
        std::vector<int> idx_obs;
        std::vector<int> idx_test;
public:
    model_RW(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_RW(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_RW_namespace::model_RW";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 99;
            context__.validate_dims("data initialization", "N_obs", "int", context__.to_vec());
            N_obs = int(0);
            vals_i__ = context__.vals_i("N_obs");
            pos__ = 0;
            N_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_obs", N_obs, 0);
            current_statement_begin__ = 100;
            context__.validate_dims("data initialization", "N_pt", "int", context__.to_vec());
            N_pt = int(0);
            vals_i__ = context__.vals_i("N_pt");
            pos__ = 0;
            N_pt = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_pt", N_pt, 0);
            current_statement_begin__ = 102;
            validate_non_negative_index("k_obs", "N_obs", N_obs);
            context__.validate_dims("data initialization", "k_obs", "int", context__.to_vec(N_obs));
            k_obs = std::vector<int>(N_obs, int(0));
            vals_i__ = context__.vals_i("k_obs");
            pos__ = 0;
            size_t k_obs_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < k_obs_k_0_max__; ++k_0__) {
                k_obs[k_0__] = vals_i__[pos__++];
            }
            size_t k_obs_i_0_max__ = N_obs;
            for (size_t i_0__ = 0; i_0__ < k_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "k_obs[i_0__]", k_obs[i_0__], 1);
                check_less_or_equal(function__, "k_obs[i_0__]", k_obs[i_0__], N_pt);
            }
            current_statement_begin__ = 103;
            validate_non_negative_index("t_obs", "N_obs", N_obs);
            context__.validate_dims("data initialization", "t_obs", "int", context__.to_vec(N_obs));
            t_obs = std::vector<int>(N_obs, int(0));
            vals_i__ = context__.vals_i("t_obs");
            pos__ = 0;
            size_t t_obs_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < t_obs_k_0_max__; ++k_0__) {
                t_obs[k_0__] = vals_i__[pos__++];
            }
            size_t t_obs_i_0_max__ = N_obs;
            for (size_t i_0__ = 0; i_0__ < t_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_obs[i_0__]", t_obs[i_0__], 1);
            }
            current_statement_begin__ = 105;
            context__.validate_dims("data initialization", "N_test", "int", context__.to_vec());
            N_test = int(0);
            vals_i__ = context__.vals_i("N_test");
            pos__ = 0;
            N_test = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_test", N_test, 0);
            current_statement_begin__ = 106;
            validate_non_negative_index("k_test", "N_test", N_test);
            context__.validate_dims("data initialization", "k_test", "int", context__.to_vec(N_test));
            k_test = std::vector<int>(N_test, int(0));
            vals_i__ = context__.vals_i("k_test");
            pos__ = 0;
            size_t k_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < k_test_k_0_max__; ++k_0__) {
                k_test[k_0__] = vals_i__[pos__++];
            }
            size_t k_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < k_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "k_test[i_0__]", k_test[i_0__], 1);
                check_less_or_equal(function__, "k_test[i_0__]", k_test[i_0__], N_pt);
            }
            current_statement_begin__ = 107;
            validate_non_negative_index("t_test", "N_test", N_test);
            context__.validate_dims("data initialization", "t_test", "int", context__.to_vec(N_test));
            t_test = std::vector<int>(N_test, int(0));
            vals_i__ = context__.vals_i("t_test");
            pos__ = 0;
            size_t t_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < t_test_k_0_max__; ++k_0__) {
                t_test[k_0__] = vals_i__[pos__++];
            }
            size_t t_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < t_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_test[i_0__]", t_test[i_0__], 1);
            }
            current_statement_begin__ = 109;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 111;
            validate_non_negative_index("prior_sigma", "2", 2);
            context__.validate_dims("data initialization", "prior_sigma", "double", context__.to_vec(2));
            prior_sigma = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("prior_sigma");
            pos__ = 0;
            size_t prior_sigma_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < prior_sigma_k_0_max__; ++k_0__) {
                prior_sigma[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 112;
            context__.validate_dims("data initialization", "discrete", "int", context__.to_vec());
            discrete = int(0);
            vals_i__ = context__.vals_i("discrete");
            pos__ = 0;
            discrete = vals_i__[pos__++];
            check_greater_or_equal(function__, "discrete", discrete, 0);
            check_less_or_equal(function__, "discrete", discrete, 1);
            current_statement_begin__ = 114;
            validate_non_negative_index("y_obs", "N_obs", N_obs);
            context__.validate_dims("data initialization", "y_obs", "double", context__.to_vec(N_obs));
            y_obs = std::vector<double>(N_obs, double(0));
            vals_r__ = context__.vals_r("y_obs");
            pos__ = 0;
            size_t y_obs_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < y_obs_k_0_max__; ++k_0__) {
                y_obs[k_0__] = vals_r__[pos__++];
            }
            size_t y_obs_i_0_max__ = N_obs;
            for (size_t i_0__ = 0; i_0__ < y_obs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_obs[i_0__]", y_obs[i_0__], 0);
                check_less_or_equal(function__, "y_obs[i_0__]", y_obs[i_0__], M);
            }
            current_statement_begin__ = 115;
            validate_non_negative_index("y_test", "N_test", N_test);
            context__.validate_dims("data initialization", "y_test", "double", context__.to_vec(N_test));
            y_test = std::vector<double>(N_test, double(0));
            vals_r__ = context__.vals_r("y_test");
            pos__ = 0;
            size_t y_test_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < y_test_k_0_max__; ++k_0__) {
                y_test[k_0__] = vals_r__[pos__++];
            }
            size_t y_test_i_0_max__ = N_test;
            for (size_t i_0__ = 0; i_0__ < y_test_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_test[i_0__]", y_test[i_0__], 0);
                check_less_or_equal(function__, "y_test[i_0__]", y_test[i_0__], M);
            }
            // initialize transformed data variables
            current_statement_begin__ = 120;
            N_mis = int(0);
            stan::math::fill(N_mis, std::numeric_limits<int>::min());
            current_statement_begin__ = 121;
            validate_non_negative_index("yi_test", "(N_test * discrete)", (N_test * discrete));
            yi_test = std::vector<int>((N_test * discrete), int(0));
            stan::math::fill(yi_test, std::numeric_limits<int>::min());
            current_statement_begin__ = 126;
            validate_non_negative_index("t_max", "N_pt", N_pt);
            t_max = std::vector<int>(N_pt, int(0));
            stan::math::fill(t_max, std::numeric_limits<int>::min());
            stan::math::assign(t_max,rep_array(0, N_pt));
            current_statement_begin__ = 127;
            N = int(0);
            stan::math::fill(N, std::numeric_limits<int>::min());
            current_statement_begin__ = 128;
            validate_non_negative_index("id_start", "N_pt", N_pt);
            id_start = std::vector<int>(N_pt, int(0));
            stan::math::fill(id_start, std::numeric_limits<int>::min());
            current_statement_begin__ = 129;
            validate_non_negative_index("id_end", "N_pt", N_pt);
            id_end = std::vector<int>(N_pt, int(0));
            stan::math::fill(id_end, std::numeric_limits<int>::min());
            current_statement_begin__ = 130;
            validate_non_negative_index("idx_obs", "N_obs", N_obs);
            idx_obs = std::vector<int>(N_obs, int(0));
            stan::math::fill(idx_obs, std::numeric_limits<int>::min());
            current_statement_begin__ = 131;
            validate_non_negative_index("idx_test", "N_test", N_test);
            idx_test = std::vector<int>(N_test, int(0));
            stan::math::fill(idx_test, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 133;
            for (int i = 1; i <= N_obs; ++i) {
                current_statement_begin__ = 134;
                stan::model::assign(t_max, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(k_obs, i, "k_obs", 1)), stan::model::nil_index_list()), 
                            std::max(get_base1(t_obs, i, "t_obs", 1), get_base1(t_max, get_base1(k_obs, i, "k_obs", 1), "t_max", 1)), 
                            "assigning variable t_max");
            }
            current_statement_begin__ = 136;
            for (int i = 1; i <= N_test; ++i) {
                current_statement_begin__ = 137;
                stan::model::assign(t_max, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(k_test, i, "k_test", 1)), stan::model::nil_index_list()), 
                            std::max(get_base1(t_test, i, "t_test", 1), get_base1(t_max, get_base1(k_test, i, "k_test", 1), "t_max", 1)), 
                            "assigning variable t_max");
            }
            current_statement_begin__ = 139;
            stan::math::assign(N, sum(t_max));
            current_statement_begin__ = 141;
            for (int k = 1; k <= N_pt; ++k) {
                current_statement_begin__ = 142;
                if (as_bool(logical_eq(k, 1))) {
                    current_statement_begin__ = 143;
                    stan::model::assign(id_start, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable id_start");
                } else {
                    current_statement_begin__ = 145;
                    stan::model::assign(id_start, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                (get_base1(id_end, (k - 1), "id_end", 1) + 1), 
                                "assigning variable id_start");
                }
                current_statement_begin__ = 147;
                stan::model::assign(id_end, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            ((get_base1(id_start, k, "id_start", 1) - 1) + get_base1(t_max, k, "t_max", 1)), 
                            "assigning variable id_end");
            }
            current_statement_begin__ = 150;
            for (int i = 1; i <= N_obs; ++i) {
                current_statement_begin__ = 151;
                stan::model::assign(idx_obs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(id_start, get_base1(k_obs, i, "k_obs", 1), "id_start", 1) - 1) + get_base1(t_obs, i, "t_obs", 1)), 
                            "assigning variable idx_obs");
            }
            current_statement_begin__ = 153;
            for (int i = 1; i <= N_test; ++i) {
                current_statement_begin__ = 154;
                stan::model::assign(idx_test, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((get_base1(id_start, get_base1(k_test, i, "k_test", 1), "id_start", 1) - 1) + get_base1(t_test, i, "t_test", 1)), 
                            "assigning variable idx_test");
            }
            current_statement_begin__ = 157;
            stan::math::assign(N_mis, (N - N_obs));
            current_statement_begin__ = 159;
            if (as_bool(logical_eq(discrete, 1))) {
                current_statement_begin__ = 160;
                for (int i = 1; i <= N_test; ++i) {
                    current_statement_begin__ = 161;
                    stan::model::assign(yi_test, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                bin_search(get_base1(y_test, i, "y_test", 1), 0, M, pstream__), 
                                "assigning variable yi_test");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 168;
            validate_non_negative_index("y_mis", "N_mis", N_mis);
            num_params_r__ += (1 * N_mis);
            current_statement_begin__ = 169;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_RW() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 168;
        if (!(context__.contains_r("y_mis")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y_mis missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y_mis");
        pos__ = 0U;
        validate_non_negative_index("y_mis", "N_mis", N_mis);
        context__.validate_dims("parameter initialization", "y_mis", "double", context__.to_vec(N_mis));
        std::vector<double> y_mis(N_mis, double(0));
        size_t y_mis_k_0_max__ = N_mis;
        for (size_t k_0__ = 0; k_0__ < y_mis_k_0_max__; ++k_0__) {
            y_mis[k_0__] = vals_r__[pos__++];
        }
        size_t y_mis_i_0_max__ = N_mis;
        for (size_t i_0__ = 0; i_0__ < y_mis_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, M, y_mis[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y_mis: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 169;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 168;
            std::vector<local_scalar_t__> y_mis;
            size_t y_mis_d_0_max__ = N_mis;
            y_mis.reserve(y_mis_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < y_mis_d_0_max__; ++d_0__) {
                if (jacobian__)
                    y_mis.push_back(in__.scalar_lub_constrain(0, M, lp__));
                else
                    y_mis.push_back(in__.scalar_lub_constrain(0, M));
            }
            current_statement_begin__ = 169;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 175;
            validate_non_negative_index("y", "N", N);
            std::vector<local_scalar_t__> y(N, local_scalar_t__(0));
            stan::math::initialize(y, DUMMY_VAR__);
            stan::math::fill(y, DUMMY_VAR__);
            stan::math::assign(y,rep_array(-(1.0), N));
            // transformed parameters block statements
            current_statement_begin__ = 177;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_multi(idx_obs), stan::model::nil_index_list()), 
                        y_obs, 
                        "assigning variable y");
            {
            current_statement_begin__ = 179;
            int id(0);
            (void) id;  // dummy to suppress unused var warning
            stan::math::fill(id, std::numeric_limits<int>::min());
            stan::math::assign(id,1);
            current_statement_begin__ = 180;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 181;
                if (as_bool(logical_eq(get_base1(y, i, "y", 1), -(1)))) {
                    current_statement_begin__ = 182;
                    stan::model::assign(y, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(y_mis, id, "y_mis", 1), 
                                "assigning variable y");
                    current_statement_begin__ = 183;
                    stan::math::assign(id, (id + 1));
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 175;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(y[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 190;
            lp_accum__.add(normal_log<propto__>((sigma / (M + 0.0)), get_base1(prior_sigma, 1, "prior_sigma", 1), get_base1(prior_sigma, 2, "prior_sigma", 1)));
            current_statement_begin__ = 192;
            for (int k = 1; k <= N_pt; ++k) {
                current_statement_begin__ = 194;
                lp_accum__.add(normal_log<propto__>(to_vector(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max((get_base1(id_start, k, "id_start", 1) + 1), get_base1(id_end, k, "id_end", 1)), stan::model::nil_index_list()), "y")), to_vector(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(get_base1(id_start, k, "id_start", 1), (get_base1(id_end, k, "id_end", 1) - 1)), stan::model::nil_index_list()), "y")), sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("y_mis");
        names__.push_back("sigma");
        names__.push_back("y");
        names__.push_back("y_rep");
        names__.push_back("lpd");
        names__.push_back("cum_err");
        names__.push_back("y_pred");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_mis);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_test);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N_test * discrete));
        dims__.push_back((M + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_test);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_RW_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> y_mis;
        size_t y_mis_d_0_max__ = N_mis;
        y_mis.reserve(y_mis_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < y_mis_d_0_max__; ++d_0__) {
            y_mis.push_back(in__.scalar_lub_constrain(0, M));
        }
        size_t y_mis_k_0_max__ = N_mis;
        for (size_t k_0__ = 0; k_0__ < y_mis_k_0_max__; ++k_0__) {
            vars__.push_back(y_mis[k_0__]);
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 175;
            validate_non_negative_index("y", "N", N);
            std::vector<double> y(N, double(0));
            stan::math::initialize(y, DUMMY_VAR__);
            stan::math::fill(y, DUMMY_VAR__);
            stan::math::assign(y,rep_array(-(1.0), N));
            // do transformed parameters statements
            current_statement_begin__ = 177;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_multi(idx_obs), stan::model::nil_index_list()), 
                        y_obs, 
                        "assigning variable y");
            {
            current_statement_begin__ = 179;
            int id(0);
            (void) id;  // dummy to suppress unused var warning
            stan::math::fill(id, std::numeric_limits<int>::min());
            stan::math::assign(id,1);
            current_statement_begin__ = 180;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 181;
                if (as_bool(logical_eq(get_base1(y, i, "y", 1), -(1)))) {
                    current_statement_begin__ = 182;
                    stan::model::assign(y, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(y_mis, id, "y_mis", 1), 
                                "assigning variable y");
                    current_statement_begin__ = 183;
                    stan::math::assign(id, (id + 1));
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t y_k_0_max__ = N;
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    vars__.push_back(y[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 200;
            validate_non_negative_index("y_rep", "N", N);
            std::vector<double> y_rep(N, double(0));
            stan::math::initialize(y_rep, DUMMY_VAR__);
            stan::math::fill(y_rep, DUMMY_VAR__);
            current_statement_begin__ = 201;
            validate_non_negative_index("lpd", "N_test", N_test);
            std::vector<double> lpd(N_test, double(0));
            stan::math::initialize(lpd, DUMMY_VAR__);
            stan::math::fill(lpd, DUMMY_VAR__);
            current_statement_begin__ = 202;
            validate_non_negative_index("cum_err", "(N_test * discrete)", (N_test * discrete));
            validate_non_negative_index("cum_err", "(M + 1)", (M + 1));
            std::vector<std::vector<double> > cum_err((N_test * discrete), std::vector<double>((M + 1), double(0)));
            stan::math::initialize(cum_err, DUMMY_VAR__);
            stan::math::fill(cum_err, DUMMY_VAR__);
            current_statement_begin__ = 203;
            validate_non_negative_index("y_pred", "N_test", N_test);
            std::vector<double> y_pred(N_test, double(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 206;
            if (as_bool(logical_eq(discrete, 1))) {
                current_statement_begin__ = 208;
                for (int k = 1; k <= N_pt; ++k) {
                    current_statement_begin__ = 209;
                    stan::model::assign(y_rep, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(id_start, k, "id_start", 1)), stan::model::nil_index_list()), 
                                stan::math::round(get_base1(y, get_base1(id_start, k, "id_start", 1), "y", 1)), 
                                "assigning variable y_rep");
                    current_statement_begin__ = 210;
                    for (int t = get_base1(id_start, k, "id_start", 1); t <= (get_base1(id_end, k, "id_end", 1) - 1); ++t) {
                        current_statement_begin__ = 211;
                        stan::model::assign(y_rep, 
                                    stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list()), 
                                    discrete_normal_rng(M, get_base1(y, t, "y", 1), sigma, base_rng__, pstream__), 
                                    "assigning variable y_rep");
                    }
                }
            } else {
                current_statement_begin__ = 217;
                for (int k = 1; k <= N_pt; ++k) {
                    current_statement_begin__ = 218;
                    stan::model::assign(y_rep, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(id_start, k, "id_start", 1)), stan::model::nil_index_list()), 
                                get_base1(y, get_base1(id_start, k, "id_start", 1), "y", 1), 
                                "assigning variable y_rep");
                    current_statement_begin__ = 219;
                    for (int t = get_base1(id_start, k, "id_start", 1); t <= (get_base1(id_end, k, "id_end", 1) - 1); ++t) {
                        current_statement_begin__ = 220;
                        stan::model::assign(y_rep, 
                                    stan::model::cons_list(stan::model::index_uni((t + 1)), stan::model::nil_index_list()), 
                                    truncated_normal_rng(M, get_base1(y, t, "y", 1), sigma, base_rng__, pstream__), 
                                    "assigning variable y_rep");
                    }
                }
            }
            current_statement_begin__ = 225;
            stan::math::assign(y_pred, stan::model::rvalue(y_rep, stan::model::cons_list(stan::model::index_multi(idx_test), stan::model::nil_index_list()), "y_rep"));
            current_statement_begin__ = 228;
            if (as_bool(logical_eq(discrete, 1))) {
                current_statement_begin__ = 230;
                for (int i = 1; i <= N_test; ++i) {
                    current_statement_begin__ = 231;
                    if (as_bool(logical_eq(get_base1(id_start, get_base1(k_test, i, "k_test", 1), "id_start", 1), get_base1(idx_test, i, "idx_test", 1)))) {
                        current_statement_begin__ = 233;
                        stan::model::assign(lpd, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    -(stan::math::log((M + 1.0))), 
                                    "assigning variable lpd");
                        current_statement_begin__ = 234;
                        for (int j = 0; j <= M; ++j) {
                            current_statement_begin__ = 235;
                            stan::model::assign(cum_err, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((j + 1)), stan::model::nil_index_list())), 
                                        (((j + 1.0) / (M + 1.0)) - step((j - get_base1(yi_test, i, "yi_test", 1)))), 
                                        "assigning variable cum_err");
                        }
                    } else {
                        current_statement_begin__ = 238;
                        stan::model::assign(lpd, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    discrete_normal_lpmf(get_base1(yi_test, i, "yi_test", 1), M, get_base1(y, (get_base1(idx_test, i, "idx_test", 1) - 1), "y", 1), sigma, pstream__), 
                                    "assigning variable lpd");
                        current_statement_begin__ = 239;
                        for (int j = 0; j <= M; ++j) {
                            current_statement_begin__ = 240;
                            stan::model::assign(cum_err, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((j + 1)), stan::model::nil_index_list())), 
                                        (discrete_normal_cdf(j, M, get_base1(y, (get_base1(idx_test, i, "idx_test", 1) - 1), "y", 1), sigma, pstream__) - step((j - get_base1(yi_test, i, "yi_test", 1)))), 
                                        "assigning variable cum_err");
                        }
                    }
                }
            } else {
                current_statement_begin__ = 247;
                for (int i = 1; i <= N_test; ++i) {
                    current_statement_begin__ = 248;
                    if (as_bool(logical_eq(get_base1(id_start, get_base1(k_test, i, "k_test", 1), "id_start", 1), get_base1(idx_test, i, "idx_test", 1)))) {
                        current_statement_begin__ = 250;
                        stan::model::assign(lpd, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    -(stan::math::log((M + 0.0))), 
                                    "assigning variable lpd");
                    } else {
                        current_statement_begin__ = 252;
                        stan::model::assign(lpd, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    truncated_normal_lpdf((get_base1(y_test, i, "y_test", 1) + 0.0), M, get_base1(y, (get_base1(idx_test, i, "idx_test", 1) - 1), "y", 1), sigma, pstream__), 
                                    "assigning variable lpd");
                    }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 200;
            size_t y_rep_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
                vars__.push_back(y_rep[k_0__]);
            }
            current_statement_begin__ = 201;
            size_t lpd_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
                vars__.push_back(lpd[k_0__]);
            }
            current_statement_begin__ = 202;
            size_t cum_err_k_0_max__ = (N_test * discrete);
            size_t cum_err_k_1_max__ = (M + 1);
            for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                    vars__.push_back(cum_err[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 203;
            size_t y_pred_k_0_max__ = N_test;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                vars__.push_back(y_pred[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_RW";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t y_mis_k_0_max__ = N_mis;
        for (size_t k_0__ = 0; k_0__ < y_mis_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_mis" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lpd_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lpd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cum_err_k_0_max__ = (N_test * discrete);
        size_t cum_err_k_1_max__ = (M + 1);
        for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cum_err" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t y_pred_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t y_mis_k_0_max__ = N_mis;
        for (size_t k_0__ = 0; k_0__ < y_mis_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_mis" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = N;
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lpd_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < lpd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lpd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t cum_err_k_0_max__ = (N_test * discrete);
        size_t cum_err_k_1_max__ = (M + 1);
        for (size_t k_1__ = 0; k_1__ < cum_err_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < cum_err_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cum_err" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t y_pred_k_0_max__ = N_test;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_RW_namespace::model_RW stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
