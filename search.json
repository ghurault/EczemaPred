[{"path":[]},{"path":"/CONTRIBUTING.html","id":"updating-stan-files","dir":"","previous_headings":"","what":"Updating Stan files","title":"Note to contributors","text":"updating Stan files, run following:","code":"rstantools::rstan_config() example(source) # defines the sourceDir() function try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE) pkgbuild::compile_dll() roxygen2::roxygenize()"},{"path":"/CONTRIBUTING.html","id":"website","dir":"","previous_headings":"","what":"Website","title":"Note to contributors","text":"website deployed “gh-pages” branch repository, using GitHub Actions. regenerate website locally, use pkgdown::build_site().","code":""},{"path":"/CONTRIBUTING.html","id":"stan-specific-notes","dir":"","previous_headings":"","what":"Stan-specific notes","title":"Note to contributors","text":".stan files containing stanmodel definitions must placed inst/stan. Additional files included stanmodel definition files (via e.g., #include \"mylib.stan\") must placed subfolder inst/stan. Additional C++ files needed .stan file must placed inst/include, can interact Stan C++ library via #include directives placed file inst/include/stan_meta_header.hpp. precompiled stanmodel objects appear named list called stanmodels, can call e.g., rstan::sampling(stanmodels$foo, ...) See Guidelines developers R packages interfacing Stan information.","code":""},{"path":"/CONTRIBUTING.html","id":"git","dir":"","previous_headings":"","what":"Git","title":"Note to contributors","text":"try follow Git flow managing repository.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/BinRW.html","id":"prior-predictive-distribution","dir":"Articles","previous_headings":"","what":"Prior predictive distribution","title":"Binomial random walk model","text":"First, sample prior predictive distribution inspect prior generate fake data.","code":"fit0 <- sample_prior(model,                      N_patient = N_patient,                      t_max = t_max,                      chains = 1,                      refresh = 0) check_hmc_diagnostics(fit0) #>  #> Divergences: #> 0 of 1000 iterations ended with a divergence. #>  #> Tree depth: #> 0 of 1000 iterations saturated the maximum tree depth of 10. #>  #> Energy: #> E-BFMI indicated no pathological behavior. # pairs(fit0, pars = pars$Population) plot(fit0, pars = c(pars$Population, paste0(pars$Patient, \"[1]\")), plotfun = \"hist\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"/articles/BinRW.html","id":"generating-fake-data","dir":"Articles","previous_headings":"","what":"Generating fake data","title":"Binomial random walk model","text":"generate fake data choosing draw one prior predictive distribution. artificially produce missing values make data representative observe real life. , generate missingness using two-state Markov Chain. inspect time-series patients.","code":"p_mis <- .1 p_obs_obs <- .9 horizon <- 5  # Take one draw (different draws corresponds to different a priori pattern in the data) draw <- 4  true_param <- rstan::extract(fit0, pars = c(pars$Population, pars$Patient)) %>%   HuraultMisc::extract_draws(draw)  yrep <- rstan::extract(fit0, pars = \"y_rep\")[[1]]  fd <- get_index2(t_max) %>%   mutate(Score = yrep[draw, ]) fd <- lapply(1:N_patient,              function(i) {                sub_fd <- filter(fd, Patient == i)                id_mis <- generate_missing(t_max[i] - horizon, type = \"markovchain\", p_mis = p_mis, p_obs_obs = p_obs_obs)                id_mis <- c(id_mis, rep(FALSE, horizon)) # don't generate missing values for prediction horizon                sub_fd[id_mis, \"Score\"] <- NA                return(sub_fd)              }) %>%   bind_rows() lapply(sort(sample(1:N_patient, min(N_patient, 4))),        function(pid) {          fd %>%            filter(Patient == pid) %>%            ggplot(aes(x = Time, y = Score)) +            geom_line() +            geom_point() +            coord_cartesian(ylim = c(0, params$max_score)) +            labs(title = paste0(\"Patient \", pid)) +            theme_bw(base_size = 15)        }) %>%   plot_grid(plotlist = ., ncol = 2)"},{"path":"/articles/BinRW.html","id":"fitting-data-to-the-model","dir":"Articles","previous_headings":"","what":"Fitting data to the model","title":"Binomial random walk model","text":"Now, perform fake data check, .e. fitting model fake data extracted prior predictive distribution see can recover true parameters.","code":"train <- fd %>%   group_by(Patient) %>%   filter(Time <= max(Time) - horizon) %>%   ungroup() %>%   drop_na()  test <- fd %>%   group_by(Patient) %>%   filter(Time > max(Time) - horizon) %>%   mutate(Horizon = Time - min(Time) + 1) %>%   ungroup() %>%   drop_na()  fit <- EczemaFit(model,                  train = train,                  test = test,                  chains = 1, # only one chain for speed                  refresh = 0)"},{"path":"/articles/BinRW.html","id":"diagnostics","dir":"Articles","previous_headings":"Fitting data to the model","what":"Diagnostics","title":"Binomial random walk model","text":"look evidence absence convergences inspecting divergences trace plots.","code":"check_hmc_diagnostics(fit) #>  #> Divergences: #> 0 of 1000 iterations ended with a divergence. #>  #> Tree depth: #> 0 of 1000 iterations saturated the maximum tree depth of 10. #>  #> Energy: #> E-BFMI indicated no pathological behavior. pairs(fit, pars = pars$Population) #> Warning in par(usr): argument 1 does not name a graphical parameter  #> Warning in par(usr): argument 1 does not name a graphical parameter  #> Warning in par(usr): argument 1 does not name a graphical parameter plot(fit, pars = pars$Population, plotfun = \"trace\")"},{"path":"/articles/BinRW.html","id":"posterior-estimates","dir":"Articles","previous_headings":"Fitting data to the model","what":"Posterior estimates","title":"Binomial random walk model","text":"visualise posterior estimates compare prior.  can also quantify influence prior posterior estimates computing posterior shrinkage Mahalanobis distance mean posterior prior. posterior shrinkage roughly quantifies much model learning, defined parameter \\(\\theta\\) \\(1 - \\frac{\\operatorname{Var}(\\theta_\\text{post})}{\\operatorname{Var}(\\theta_\\text{prior}}\\). distance prior posterior can used assess whether prior informative , distance greater 2 3 interpreted posterior “included” prior.","code":"par0 <- extract_parameters(fit0, pars = pars_of_interest) par <- extract_parameters(fit, pars = pars_of_interest) HuraultMisc::plot_prior_posterior(par0, par, pars = pars$Population) HuraultMisc::plot_prior_influence(par0, par, pars = unlist(pars_of_interest))"},{"path":"/articles/BinRW.html","id":"can-we-recover-the-true-parameters","dir":"Articles","previous_headings":"Fitting data to the model","what":"Can we recover the true parameters?","title":"Binomial random walk model","text":"compare posterior estimates true parameters see algorithm worked expected.  can also quantify “accuracy” posterior estimates computing coverage probability parameters model, proportion parameters x% credible interval includes true value. instance, expect approximately 50% parameters 50% credible interval including true value.","code":"par %>%     left_join(true_param, by = c(\"Variable\" = \"Parameter\", \"Index\")) %>%     rename(True = Value) %>%     ggplot(aes(x = Variable, group = Index)) +     geom_pointrange(aes(y = Mean, ymin = `5%`, ymax = `95%`, colour = \"Posterior\"),                     position = position_dodge(width = .8)) +     geom_point(aes(y = True, colour = \"Truth\"), size = 2,                position = position_dodge(width = .8)) +     coord_flip() +     scale_colour_manual(values = c(\"Posterior\" = \"black\", \"Truth\" = \"#E69F00\")) +     labs(x = \"\", y = \"Estimate\", colour = \"\") +     theme_bw(base_size = 20) +     theme(legend.position = \"top\") HuraultMisc::plot_coverage(do.call(cbind, rstan::extract(fit, pars = true_param[[\"Parameter\"]])),                            true_param[[\"Value\"]])"},{"path":"/articles/BinRW.html","id":"posterior-predictive-trajectory","dir":"Articles","previous_headings":"Fitting data to the model","what":"Posterior predictive trajectory","title":"Binomial random walk model","text":"inspect posterior predictive trajectory detect discrepancies data model’s simulations.","code":"ms <- min(1, 20 / (params$max_score + 1)) pl <- lapply(sort(sample(1:N_patient, 4)),        function(pid) {          tryCatch({            plot_ppc_traj_pmf(fit, train = train, test = test, patient_id = pid, max_score = params$max_score, max_scale = ms) +            labs(title = paste0(\"Patient \", pid))          }, error = function(e) {NULL})        }) plot_grid(   get_legend(pl[[1]] + theme(legend.position = \"top\")),   plot_grid(plotlist = lapply(pl, function(x) {x + theme(legend.position = \"none\")}),             ncol = 2),   ncol = 1, rel_heights = c(.1, .9) )"},{"path":"/articles/BinRW.html","id":"performance","dir":"Articles","previous_headings":"Fitting data to the model","what":"Performance","title":"Binomial random walk model","text":"Finally, compute lpd RPS observation test set plot average metrics function prediction horizon. expect lower performance (decreased lpd, increased RPS) increasing prediction horizon.","code":"test <- test %>%   mutate(lpd = extract_lpd(fit),          RPS = extract_RPS(fit))  test %>%   pivot_longer(cols = c(\"lpd\", \"RPS\"), names_to = \"Metric\", values_to = \"Value\") %>%   group_by(Metric, Horizon) %>%   summarise(Mean = mean(Value), SD = sd(Value), SE = SD / sqrt(n())) %>%   ggplot(aes(x = Horizon, y = Mean, ymin = Mean - SE, ymax = Mean + SE)) +   geom_pointrange() +   facet_wrap(vars(Metric), scales = \"free\") +   theme_bw(base_size = 15) #> `summarise()` has grouped output by 'Metric'. You can override using the #> `.groups` argument."},{"path":"/articles/ContinuousModels.html","id":"generate-fake-data","dir":"Articles","previous_headings":"","what":"Generate fake data","title":"Continuous models","text":"model considered supposed used baselines, generate fake data different generating process. enforce constrain data bounded 0 100, generate data logit scale, take inverse logit multiply 100. also add missing values make data representative observed real life. can inspect time-series handful patients.  Finally, split data training testing set, testing set correspond last observations time-series.","code":"N_patient <- 20 t_max <- rpois(N_patient, 50) y0 <- rbeta(N_patient, 5, 5) mu_alpha <- 0.8 phi_alpha <- 10 alpha <- 0.8 b <- rnorm(N_patient, 0, 0.1) sigma <- 0.2  df <- lapply(1:N_patient,              function(i) {                y <- rep(NA, t_max[i])                err <- rnorm(t_max[i] - 1, 0, sigma)                y[1] <- HuraultMisc::logit(y0[i])                for (t in 2:t_max[i]) {                  y[t] = alpha * y[t - 1] + b[i] + err[t - 1]                }                y <- HuraultMisc::inv_logit(y) * max_score                t_mis <- generate_missing(t_max[i], type = \"markovchain\", p_mis = 0.2, p_obs_obs = 0.8)                y[t_mis] <- NA                                data.frame(Patient = i,                           Time = 1:t_max[i],                           Score = y)              }) %>%   bind_rows() smp_pt <- sort(sample(1:N_patient, 4)) lapply(smp_pt,        function(pid) {          df %>%            filter(Patient == pid) %>%            ggplot(aes(x = Time, y = Score)) +            geom_line() +            geom_point() +            coord_cartesian(ylim = c(0, max_score)) +            labs(title = paste0(\"Patient \", pid)) +            theme_bw(base_size = 15)        }) %>%   plot_grid(plotlist = ., ncol = 2) horizon <- 10  df <- df %>%   drop_na() %>%   group_by(Patient) %>%   mutate(LastTime = max(Time) - horizon,          Label = case_when(Time <= LastTime ~ \"Training\",                            TRUE ~ \"Testing\")) %>%   ungroup()  train <- df %>% filter(Label == \"Training\") test <- df %>%   filter(Label == \"Testing\") %>%   mutate(Horizon = Time - LastTime)"},{"path":"/articles/ContinuousModels.html","id":"fit-models","dir":"Articles","previous_headings":"","what":"Fit models","title":"Continuous models","text":"fit different models data, inspect whether divergences sampling. , compute log predictive density observation different models plot average performance. give sense scale, add performance uniform forecast historical forecast plot.  , best model terms --sample lpd MixedAR1. plot posterior predictive trajectory model patients inspect well fits data.","code":"res <- lapply(mdl_names,               function(mdl) {                                  model <- EczemaModel(mdl, max_score = max_score, discrete = FALSE)                                  fit <- EczemaFit(model,                                  train = train,                                  test = test,                                  chains = 1,                                  refresh = 0)                                  diag <- data.frame(Divergences = get_num_divergent(fit),                                    MaxTreeDepth = get_num_max_treedepth(fit),                                    Model = mdl)                                  perf <- test %>%                   add_predictions(fit, discrete = FALSE, include_samples = FALSE) %>%                   mutate(Model = mdl)                                  return(list(Fit = fit,                             Diagnostics = diag,                             Performance = perf))                                })  diag <- lapply(res, function(x) {x$Diagnostics}) %>% bind_rows() perf <- lapply(res, function(x) {x$Performance}) %>% bind_rows()  knitr::kable(diag) perf <- bind_rows(perf,                   add_uniform_pred(test, max_score, discrete = FALSE) %>%                     mutate(Model = \"uniform\"),                   add_historical_pred(test, train, max_score, discrete = FALSE) %>%                     mutate(Model = \"historical\"))  mean_perf <- perf %>%   group_by(Model) %>%   summarise(Mean = mean(lpd), SE = sd(lpd) / sqrt(n())) %>%   ungroup() %>%   mutate(Model = forcats::fct_reorder(factor(Model), Mean))  ggplot(data = mean_perf,        aes(x = Model, y = Mean, ymin = Mean - SE, ymax = Mean + SE)) +   geom_pointrange() +   labs(y = \"lpd\", x = \"\") +   theme_bw(base_size = 15) best_model <- mean_perf %>%   filter(Mean == max(Mean)) %>%   pull(Model) fit_best <- res[[which(mdl_names == best_model)]]$Fit  pl <- lapply(smp_pt,        function(pid) {          plot_ppc_traj_fanchart(fit_best, train = train, test = test, patient_id = pid, max_score = max_score) +            labs(title = paste0(\"Patient \", pid))        }) plot_grid(   get_legend(pl[[1]] + theme(legend.position = \"top\")),   plot_grid(plotlist = lapply(pl, function(x) {x + theme(legend.position = \"none\")}),             ncol = 2),   ncol = 1, rel_heights = c(.1, .9) )"},{"path":"/articles/ExtendModels.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Extending EczemaPred models","text":"EczemaPred package provides collection “simple” statistical models addresses common challenges working observational eczema severity data: multiple time-series (longitudinal data) potentially patient-dependent parameters irregular measurements missing values imprecise measurements (cf. measurement error) small data (cf. uncertainty quantification) discrete ordinal (notably bounded) outcomes severity scores aggregates multiple items , models can extended investigate diverse research questions. vignette describes use package modify pre-processing model extended.","code":"library(EczemaPred) library(dplyr)"},{"path":"/articles/ExtendModels.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Extending EczemaPred models","text":"package uses S3 object oriented programming system R allow inheritance polymorphism. details S3 OOP system, can check Hadley Wickham’s book. package provides set generics can useful extending models: default_prior(): Provide default priors validate_prior(): Check prior correctly specified prepare_standata(): Prepare data input Stan sampler list_parameters(): List parameters model print_prior(): display priors print method (optional) EczemaFit(): Fit model (default generic valid models provided package) sample_prior(): Sample prior predictive distribution model (default generic valid models provided package)","code":""},{"path":"/articles/ExtendModels.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Extending EczemaPred models","text":"example, let’s assume like include additional covariates BinRW model, sex patient (variable sex, coded binary, coefficient beta_sex).","code":""},{"path":"/articles/ExtendModels.html","id":"modifying-the-stan-code","dir":"Articles","previous_headings":"Example","what":"Modifying the Stan code","title":"Extending EczemaPred models","text":"original Stan model, available , mean: Including sex data block: int<lower = 0, upper = 1> sex[N_pt]; Including beta_sex parameters block: real beta_sex; Changing latent dynamic transformed parameters block, .e. changing logit_lat[t] = logit_lat[t - 1] + sigma * eta[t]; logit_lat[t] = logit_lat[t - 1] + beta_sex * sex[k] sigma * eta[t]; Include prior beta_sex model block, example: sex ~ normal(0, 1). prior can also specified data data block real prior_beta_sex[2]; model block sex ~ normal(prior_beta_sex[1], prior_beta_sex[2]); Let’s call new model BinRW2.","code":""},{"path":"/articles/ExtendModels.html","id":"updating-the-pre-processing","dir":"Articles","previous_headings":"Example","what":"Updating the pre-processing","title":"Extending EczemaPred models","text":"One way use package infrastructure minimise amount new code write create new model class BinRW2 inherits class BinRW. also write BinRW2 methods default_prior, validate_prior print_prior makes use NextMethod() call methods parent class BinRW. Similarly can write method list_parameters: finally, need write method prepare_standata, need provide sex data addition data required “BinRW”.","code":"BinRW2 <- function(max_score, prior = NULL) {      model <- EczemaModel(\"BinRW\", max_score = max_score)      model$name <- \"BinRW2\"   model$stanmodel <- \"path_to_stancode\"   class(model) <- c(\"BinRW2\", class(model))      model$prior <- default_prior(model) # Overwrite BinRW prior   model <- replace_prior(model, prior = prior) # Overwrite BinRW2 default prior   validate_prior(model) # Check BinRW2 prior      return(model)  }  default_prior.BinRW2 <- function(model) {   c(list(beta_sex = c(0, 1)),     NextMethod()) }  validate_prior.BinRW2 <- function(model) {   prior <- model$prior   stopifnot(is.list(prior),             \"beta_sex\" %in% names(prior),             is.numeric(prior$beta_sex),             length(prior$beta_sex) == 2,             prior$beta_sex[2] > 0)   NextMethod() }  print_prior.BinRW2 <- function(model, digits = 2) {   print_distribution(\"beta_sex\", \"normal\", model$prior$beta_sex, digits = digits)   NextMethod() } list_parameters.BinRW2 <- function(model) {   pars <- NextMethod()   pars$Population <- c(pars$Population, \"beta_sex\")   return(pars) } prepare_standata.BinRW2 <- function(model, train, test = NULL, sex) {   out <- NextMethod()   stopifnot(out$N_pt == length(sex),             all(sex %in% c(0, 1)))   out <- c(out, list(sex = sex))   return(out) }"},{"path":"/articles/ExtendModels.html","id":"fitting-the-model","dir":"Articles","previous_headings":"Example","what":"Fitting the model","title":"Extending EczemaPred models","text":"Now everything place, can use generics sample prior predictive distribution model fit data like EczemaPred models. sample prior predictive distribution, need generate empty dataset pass prepare_standata call rstan::stan (code put function sample_prior.BinRW2). fit model real data, assuming training set optionally testing set, just need call prepare_standata rstan::stan (equivalent EczemaFit function).","code":"max_score <- 100  (model <- BinRW2(max_score = max_score)) #> BinRW2 model (discrete) #> max_score = 100  #> Prior:  #> - beta_sex ~ normal(0,1) #> - sigma ~ normal+(0,0.4) #> - mu_logit_y0 ~ normal(0,1) #> - sigma_logit_y0 ~ normal(0,1.5)  list_parameters(model) #> $Population #> [1] \"sigma\"          \"mu_logit_y0\"    \"sigma_logit_y0\" \"beta_sex\"       #>  #> $Patient #> [1] \"logit_y0\" #>  #> $PatientTime #> [1] \"y_lat\" \"y_rep\" #>  #> $Observation #> [1] \"log_lik\" #>  #> $Test #> [1] \"y_pred\"  \"lpd\"     \"cum_err\" N_patient <- 10 t_max <- rpois(N_patient, 20) sex <- rbinom(N_patient, 1, 0.5)  tmp <- make_empty_data(N_patient = N_patient,                        t_max = t_max,                        max_score = model$max_score,                        discrete = model$discrete)  data_stan <- prepare_standata(model, train = tmp[[\"Training\"]], test = tmp[[\"Testing\"]], sex = sex) %>%   c(list(run = 0))  if (FALSE) {   fit_prior <- rstan::stan(model$stanmodel, data = data_stan, ...) } if (FALSE) {   train <- get_index2(t_max) %>%     mutate(Score = rstan::extract(fit_prior, pars = \"y_rep\")[[1]][10, ]) # fake data for the example      data_stan <- prepare_standata(model, train = train, sex = sex) %>%     c(list(run = 1))      fit <- rstan::stan(model$stanmodel, data = data_stan, ...) }"},{"path":"/articles/MC.html","id":"prior-predictive-distribution","dir":"Articles","previous_headings":"","what":"Prior predictive distribution","title":"Markov Chain model","text":"Stan model works pairs successive states rather time-series sequence. generate time-series prior predictive distribution, can consider possible states time-point. default prior used symmetric uniform Dirichlet distribution (Dirichlet distribution concentration parameters equal 1). can inspect empirical distribution transition probabilities.  can also plot expected transition matrix heatmap.  categories ordinal, may assume probabilities transitioning state 5 1 much smaller probability transitioning state 5 4. case, use RBF-like Dirichlet prior transition probabilities, example:  prior information value (number pseudo-count) prior , favours neighbouring transitions.","code":"df0 <- data.frame(y0 = rep(1:params$K, each = params$t_max),                   y1 = 1, # does not matter                   dt = 1) fit_prior1 <- sample_prior(model, data = df0, chains = 1, refresh = 0) rstan::plot(fit_prior1, pars = \"p\", plotfun = \"hist\") plot_transition_MC(fit_prior1) prior_RBF_MC <- function(K, alpha, l) {   # RBF-like Dirichlet prior   # Each transition pmf is normalised to a pseudo-count of K   #   # Args:   # K : number of states   # alpha: scaling factor, determining the concentration of the Dirichlet distribution   # l: length scale   #   # Returns:   # K*K matrix      p <- matrix(NA, nrow = K, ncol = K)   for (i in 1:K) {     for (j in 1:K) {       p[i, j] <- exp(-(i - j)^2 / 2 / l^2)     }     p[i, ] <- p[i, ] / sum(p[i, ])   }   p <- alpha * K * p   return(list(p = p)) }  model2 <- EczemaModel(\"MC\", K = params$K, prior = prior_RBF_MC(params$K, 1, 1))  fit_prior2 <- sample_prior(model2, data = df0, chains = 1, refresh = 0) #> Warning: There were 832 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  plot_transition_MC(fit_prior2)"},{"path":"/articles/MC.html","id":"generating-fake-data","dir":"Articles","previous_headings":"","what":"Generating fake data","title":"Markov Chain model","text":"following, consider uniform Dirichlet prior. can generate sequence taking draw sample prior predictive distribution assuming initial state following parameters used generate sequence can extracted : practice, values often missing. can generate missing values following:","code":"draw <- 501 initial <- 2  yrep <- rstan::extract(fit_prior1, pars = \"y_rep\")[[1]]  yrep1 <- matrix(yrep[draw, ], ncol = params$t_max, byrow = TRUE)  # Assemble sequence out <- rep(NA, params$t_max) out[1] <- initial for (i in 1:(params$t_max - 1)) {   out[i + 1] = yrep1[out[i], i] } df <- data.frame(t = 1:params$t_max, y = out) true_param <- rstan::extract(fit_prior1, pars = \"p\") %>%   HuraultMisc::extract_draws(draw) t_mis <- which(generate_missing(params$t_max, type = \"random\", p_mis = 0.2))  df %>%   mutate(y = replace(y, t %in% t_mis, NA)) %>%   ggplot(aes(x = t, y = y)) +   geom_point() +   geom_path() +   theme_bw(base_size = 15) df <- df %>% filter(!(t %in% t_mis))"},{"path":"/articles/MC.html","id":"fake-data-check","dir":"Articles","previous_headings":"","what":"Fake data check","title":"Markov Chain model","text":"Using fake dataset, can fit model try recover transition probabilities. can also hold observations evaluate performance model.","code":"df_MC <- df %>%   rename(y0 = y) %>%   mutate(y1 = lead(y0),          dt = lead(t) - t) %>%   drop_na()  train <- df_MC %>% filter(t <= 0.9 * params$t_max) test <- df_MC %>% filter(t > 0.9 * params$t_max)  fit <- EczemaFit(model,                  train = train,                  test = test,                  chains = 1,                  refresh = 0)"},{"path":"/articles/MC.html","id":"diagnostics","dir":"Articles","previous_headings":"Fake data check","what":"Diagnostics","title":"Markov Chain model","text":"First, look evidence absence convergences inspecting divergences trace plots.","code":"check_hmc_diagnostics(fit) #>  #> Divergences: #>  #> Tree depth: #>  #> Energy:  pairs(fit, pars = paste0(\"p[1,\", 1:params$K, \"]\")) # transitions probabilities from state 1 #> Warning in par(usr): argument 1 does not name a graphical parameter  #> Warning in par(usr): argument 1 does not name a graphical parameter  #> Warning in par(usr): argument 1 does not name a graphical parameter  #> Warning in par(usr): argument 1 does not name a graphical parameter  #> Warning in par(usr): argument 1 does not name a graphical parameter plot(fit, pars = paste0(\"p[1,\", 1:params$K, \"]\"), plotfun = \"trace\")"},{"path":"/articles/MC.html","id":"posterior-estimates","dir":"Articles","previous_headings":"Fake data check","what":"Posterior estimates","title":"Markov Chain model","text":", visualise posterior estimates compare prior.  can also quantify influence prior posterior estimates computing posterior shrinkage Mahalanobis distance mean posterior prior. posterior shrinkage roughly quantifies much model learning, defined parameter \\(\\theta\\) \\(1 - \\frac{\\operatorname{Var}(\\theta_\\text{post})}{\\operatorname{Var}(\\theta_\\text{prior}}\\). distance prior posterior can used assess whether prior informative , distance greater 2 3 interpreted posterior “included” prior.  also visualise expected transition matrix:","code":"par0 <- HuraultMisc::summary_statistics(fit_prior1, pars = \"p\") par <- HuraultMisc::summary_statistics(fit, pars = \"p\") HuraultMisc::plot_prior_posterior(par0, par, pars = \"p\", match_exact = FALSE) HuraultMisc::plot_prior_influence(par0, par, pars = \"p\", match_exact = FALSE) plot_transition_MC(fit)"},{"path":"/articles/MC.html","id":"can-we-recover-the-true-parameters","dir":"Articles","previous_headings":"Fake data check","what":"Can we recover the true parameters?","title":"Markov Chain model","text":"plot posterior estimates alongside true parameters values used generate data.  can also quantify “accuracy” posterior estimates computing coverage probability parameters model, proportion parameters x% credible interval includes true value. instance, expect approximately 50% parameters 50% credible interval including true value.","code":"HuraultMisc::summary_statistics(fit, \"p\") %>%   full_join(true_param, by = c(\"Variable\" = \"Parameter\", \"Index\")) %>%   rename(True = Value) %>%   ggplot(aes(x = Variable)) +   geom_pointrange(aes(y = Mean, ymin = `5%`, ymax = `95%`, colour = \"Posterior\")) +   geom_point(aes(y = True, colour = \"Truth\"), size = 2) +   coord_flip(ylim = c(0, 1)) +   scale_colour_manual(values = c(\"Posterior\" = \"black\", \"Truth\" = \"#E69F00\")) +   labs(x = \"\", y = \"Estimate\", colour = \"\") +   theme_bw(base_size = 20) +   theme(legend.position = \"top\") HuraultMisc::plot_coverage(do.call(cbind, rstan::extract(fit, pars = true_param[[\"Parameter\"]])),                            true_param[[\"Value\"]])"},{"path":"/articles/MC.html","id":"performance","dir":"Articles","previous_headings":"Fake data check","what":"Performance","title":"Markov Chain model","text":"Finally, can compute lpd RPS observation test set, metrics later compared another model.","code":"test <- test %>%   mutate(lpd = extract_lpd(fit),          RPS = extract_RPS(fit))  test %>%   pivot_longer(cols = c(\"lpd\", \"RPS\"), names_to = \"Metric\", values_to = \"Value\") %>%   group_by(Metric) %>%   summarise(Mean = mean(Value), SD = sd(Value), SE = SD / sqrt(n())) #> # A tibble: 2 × 4 #>   Metric   Mean     SD     SE #>   <chr>   <dbl>  <dbl>  <dbl> #> 1 RPS     0.194 0.0815 0.0204 #> 2 lpd    -1.37  0.536  0.134"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Guillem Hurault. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hurault G, Stalder J, Mery S, Delarue , Saint Aroman M, Josse G, Tanaka R (2022). “EczemaPred: computational framework personalised prediction eczema severity dynamics.” Clinical Translational Allergy, 12(3), e12140. doi:10.1002/clt2.12140.","code":"@Article{,   title = {EczemaPred: A computational framework for personalised prediction of eczema severity dynamics},   author = {Guillem Hurault and Jean François Stalder and Sophie Mery and Alain Delarue and Markéta {Saint Aroman} and Gwendal Josse and Reiko J. Tanaka},   journal = {Clinical and Translational Allergy},   year = {2022},   volume = {12},   number = {3},   pages = {e12140},   doi = {10.1002/clt2.12140}, }"},{"path":"/index.html","id":"eczemapred","dir":"","previous_headings":"","what":"Predicting the Evolution of Eczema Severity","title":"Predicting the Evolution of Eczema Severity","text":"EczemaPred R package implementing models serve building blocks predicting evolution eczema severity, provides set generic functions manipulate models. models implemented probabilistic programming language Stan. EczemaPred first introduced Hurault et al. (2022), “EczemaPred: computational framework personalised prediction eczema severity dynamics”, published Clinical Translational Allergy. analysis code research article available .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Predicting the Evolution of Eczema Severity","text":"package requires RStan C++ toolchain, can installed following instructions. , package can installed typing following commands R: install specific version, example initial release (v0.1.0): package can take minutes install models needs compiled (compilation required using package). Many warnings may displayed compilation can safely ignored. NB: EczemaPred requires HuraultMisc, personal function library, work.","code":"devtools::install_github(\"ghurault/EczemaPred\") devtools::install_github(\"ghurault/EczemaPred@v0.1.0\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Predicting the Evolution of Eczema Severity","text":"package loaded : working local, multicore CPU excess RAM, may want call options(mc.cores = parallel::detectCores()) run Stan multiple cores parallel. list functions datasets available package website typing help(package = \"EczemaPred\"). Examples package can used provided vignettes (long form documentation). Basic knowledge Bayesian modelling Stan package rstan required analyse models’ outputs. Stan documentation available . NB: purpose package abstract implementation user, R code Stan code can accessed R/ inst/stan directories, respectively.","code":"library(EczemaPred)"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Predicting the Evolution of Eczema Severity","text":"open source version EczemaPred licensed GPL v3 license, can seen LICENSE file. closed source version EczemaPred also available without restrictions GPL v3 license software usage agreement Imperial College London. information, please contact Diana Yin.","code":""},{"path":"/reference/AR1.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoregressive model (order 1) — AR1","title":"Autoregressive model (order 1) — AR1","text":"Autoregressive model (order 1)","code":""},{"path":"/reference/AR1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoregressive model (order 1) — AR1","text":"max_score Maximum value score can take discrete Whether use discrete normal distribution. used check whether data discrete , rounding predictions (cf. testing). prior Named list model's priors. NULL, uses default prior model (see default_prior()).","code":""},{"path":"/reference/AR1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autoregressive model (order 1) — AR1","text":"Details model available paper. model takes input continuous score defined 0 max_score. model naive likelihood non-truncated discretised (discrete = TRUE). result, sampling prior predictive distribution can challenging score near bounds variance sufficiently large. details see vignette. model naive trained non-truncated distribution details see vignette.","code":""},{"path":"/reference/AR1.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Autoregressive model (order 1) — AR1","text":"sigma: Standard deviation autoregression slope: Autocorrelation parameter intercept: Intercept y_inf: Autoregression mean y_mis: Missing values See list_parameters(model = \"AR1\") details.","code":""},{"path":"/reference/AR1.html","id":"priors","dir":"Reference","previous_headings":"","what":"Priors","title":"Autoregressive model (order 1) — AR1","text":"priors passed named list elements sigma, y_inf slope specifying priors corresponding parameters. element list vector length 2, containing values x1 x2, x2 > 0, : sigma / max_score ~ normal+(x1, x2). y_inf / max_score ~ normal(x1, x2). slope ~ beta(x1, x2). NB: sigma, usually x1=0 define half-normal distribution since parameter constrained positive. NB: slope, x1 x2 must positive.","code":""},{"path":"/reference/AR1.html","id":"default-priors","dir":"Reference","previous_headings":"","what":"Default priors","title":"Autoregressive model (order 1) — AR1","text":"default prior sigma translates width predictive distribution max_score. default prior y_inf covers full range score. default prior slope uniform 0-1.","code":""},{"path":"/reference/AR1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoregressive model (order 1) — AR1","text":"","code":"EczemaModel(\"AR1\", max_score = 100) #> AR1 model (continuous) #> max_score = 100  #> Prior:  #> - sigma / max_score ~ normal+(0,0.1) #> - slope ~ beta(1,1) #> - y_inf / max_score ~ normal(0.5,0.25)"},{"path":"/reference/BinMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial Markov Chain model — BinMC","title":"Binomial Markov Chain model — BinMC","text":"state-space model defined Binomial measurement error latent Markov Chain. details see BinRW vignette.","code":""},{"path":"/reference/BinMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial Markov Chain model — BinMC","text":"max_score Maximum value score can take prior Named list model's priors. NULL, uses default prior model (see default_prior()).","code":""},{"path":"/reference/BinMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binomial Markov Chain model — BinMC","text":"Details model available paper.","code":""},{"path":[]},{"path":"/reference/BinMC.html","id":"population-parameters-","dir":"Reference","previous_headings":"","what":"Population parameters:","title":"Binomial Markov Chain model — BinMC","text":"sigma: Standard deviation evolution ss1 mu_logit_p10: Population logit mean p10 sigma_logit_p10: Population logit standard deviation p10","code":""},{"path":"/reference/BinMC.html","id":"patient-dependent-parameters-","dir":"Reference","previous_headings":"","what":"Patient-dependent parameters:","title":"Binomial Markov Chain model — BinMC","text":"p10: Probability transitioning state 1 state 0 logit_p10: logit p10 logit_tss1_0: Initial condition logit(ss1 * (1 + p10))","code":""},{"path":"/reference/BinMC.html","id":"observation-dependent-patient-and-time-dependent-parameters-","dir":"Reference","previous_headings":"","what":"Observation-dependent (patient- and time-dependent) parameters:","title":"Binomial Markov Chain model — BinMC","text":"p01: Probability transitioning state 0 state 1 lambda: Mobility Markov Chain (eigenvalue transition matrix) ss1: Steady state probability state 1 y_lat: Latent score (probability) See list_parameters(model = \"BinMC\") details.","code":""},{"path":"/reference/BinMC.html","id":"priors","dir":"Reference","previous_headings":"","what":"Priors","title":"Binomial Markov Chain model — BinMC","text":"priors passed named list elements sigma, mu_logit_p10 sigma_logit_p10 specifying priors corresponding parameters. element list vector length 2, containing values x1 x2, x2 > 0, : sigma ~ normal+(x1, x2) mu_logit_p10 ~ normal(x1, x2) sigma_logit_p10 ~ normal+(x1, x2) logit_tss1_0 ~ normal(x1, x2) NB: sigma sigma_logit_p10, usually x1=0 define half-normal distribution since parameter constrained positive.","code":""},{"path":"/reference/BinMC.html","id":"default-priors","dir":"Reference","previous_headings":"","what":"Default priors","title":"Binomial Markov Chain model — BinMC","text":"default prior sigma translates odd ratio increment 5 (~ 2 * upper bound prior). default priors mu_logit_p10 sigma_logit_p10 translate approximately uniform prior p10. prior initial condition ss1 hard coded function p10.","code":""},{"path":"/reference/BinMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binomial Markov Chain model — BinMC","text":"","code":"EczemaModel(\"BinMC\", max_score = 100) #> BinMC model (discrete) #> max_score = 100  #> Prior:  #> - sigma ~ normal+(0,0.4) #> - mu_logit_p10 ~ normal(0,1) #> - sigma_logit_p10 ~ normal+(0,1.5) #> - logit_tss1_0 ~ normal(-1,1)"},{"path":"/reference/BinRW.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial random walk model — BinRW","title":"Binomial random walk model — BinRW","text":"state-space model defined Binomial measurement error latent random walk. details see vignette.","code":""},{"path":"/reference/BinRW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial random walk model — BinRW","text":"max_score Maximum value score can take prior Named list model's priors. NULL, uses default prior model (see default_prior()).","code":""},{"path":"/reference/BinRW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binomial random walk model — BinRW","text":"Details model available paper.","code":""},{"path":[]},{"path":"/reference/BinRW.html","id":"population-parameters-","dir":"Reference","previous_headings":"","what":"Population parameters:","title":"Binomial random walk model — BinRW","text":"sigma: Standard deviation random walk (logit scale) mu_logit_y0: Population mean initial condition (logit scale) sigma_logit_y0: Population standard deviation initial condition (logit scale)","code":""},{"path":"/reference/BinRW.html","id":"patient-dependent-parameters-","dir":"Reference","previous_headings":"","what":"Patient-dependent parameters:","title":"Binomial random walk model — BinRW","text":"logit_y0: Logit initial condition","code":""},{"path":"/reference/BinRW.html","id":"observation-dependent-patient-and-time-dependent-parameters-","dir":"Reference","previous_headings":"","what":"Observation-dependent (patient- and time-dependent) parameters:","title":"Binomial random walk model — BinRW","text":"y_lat: Latent score (probability) logit_lat: logit y_lat See list_parameters(model = \"BinRW\") details.","code":""},{"path":"/reference/BinRW.html","id":"priors","dir":"Reference","previous_headings":"","what":"Priors","title":"Binomial random walk model — BinRW","text":"priors passed named list elements sigma, mu_logit_y0 sigma_logit_y0 specifying priors corresponding parameters. element list vector length 2, containing values x1 x2, x2 > 0, : sigma ~ normal+(x1, x2). mu_logit_y0 ~ normal(x1, x2) sigma_logit_y0 ~ normal+(x1, x2) NB: sigma sigma_logit_y0, usually x1=0 define half-normal distribution since parameters constrained positive.","code":""},{"path":"/reference/BinRW.html","id":"default-priors","dir":"Reference","previous_headings":"","what":"Default priors","title":"Binomial random walk model — BinRW","text":"default priors depend max_score, printed examples section. default prior sigma translates odd ratio increment 5 (~ 2 * upper bound prior). default priors mu_logit_y0 sigma_logit_y0 translates approximately uniform prior y0.","code":""},{"path":"/reference/BinRW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binomial random walk model — BinRW","text":"","code":"EczemaModel(\"BinRW\", max_score = 100) #> BinRW model (discrete) #> max_score = 100  #> Prior:  #> - sigma ~ normal+(0,0.4) #> - mu_logit_y0 ~ normal(0,1) #> - sigma_logit_y0 ~ normal(0,1.5)"},{"path":"/reference/EczemaFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an EczemaModel — EczemaFit","title":"Fit an EczemaModel — EczemaFit","text":"Fit EczemaModel","code":""},{"path":"/reference/EczemaFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an EczemaModel — EczemaFit","text":"","code":"EczemaFit(model, train, test, ...)  # S3 method for EczemaModel EczemaFit(model, train, test = NULL, ...)"},{"path":"/reference/EczemaFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an EczemaModel — EczemaFit","text":"model Object train Training dataframe (see details ) test Testing dataframe (see details ) ... Arguments pass rstan::sampling()","code":""},{"path":"/reference/EczemaFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an EczemaModel — EczemaFit","text":"Stanfit object","code":""},{"path":[]},{"path":"/reference/EczemaFit.html","id":"all-models-except-mc-","dir":"Reference","previous_headings":"","what":"All models except \"MC\"","title":"Fit an EczemaModel — EczemaFit","text":"train test columns Patient (patient ID), Time (timepoint) Score (score model). Patient take integer values 1 number patients training set. Time take integer (discrete) values starts one every patient. Score take values 0 max_score. Missing values allowed (Time values necessarily consecutive, example Score t=5 missing, t=4 t=6, just remove t=5).","code":""},{"path":"/reference/EczemaFit.html","id":"-mc-model","dir":"Reference","previous_headings":"","what":"\"MC\" model","title":"Fit an EczemaModel — EczemaFit","text":"train test columns y0 (current state), y1 (next state) dt (time delay states). y0 y1 take integer values 1 K. dt take integer values greater equal 1. Missing values allowed.","code":""},{"path":"/reference/EczemaFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an EczemaModel — EczemaFit","text":"","code":"if (FALSE) { model <- EczemaModel(\"BinRW\", max_score = 100) train <- data.frame(Patient = 1, Time = 1:10, Score = rbinom(10, 100, .5)) EczemaFit(model, train) }"},{"path":"/reference/EczemaModel.html","id":null,"dir":"Reference","previous_headings":"","what":"EczemaModel constructor — EczemaModel","title":"EczemaModel constructor — EczemaModel","text":"EczemaModel constructor","code":""},{"path":"/reference/EczemaModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EczemaModel constructor — EczemaModel","text":"","code":"EczemaModel(   model_name = c(\"BinRW\", \"OrderedRW\", \"BinMC\", \"RW\", \"Smoothing\", \"AR1\", \"MixedAR1\",     \"MC\"),   max_score = NULL,   K = NULL,   discrete = FALSE,   prior = NULL )"},{"path":"/reference/EczemaModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EczemaModel constructor — EczemaModel","text":"model_name Name model create max_score Maximum value score can take. Required models except \"MC\". K Number categories. required \"MC\" model. discrete Whether model discrete . required \"RW\". prior Named list model's priors. uses default priors (see default_prior()) NULL parameters provided.","code":""},{"path":"/reference/EczemaModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EczemaModel constructor — EczemaModel","text":"object (list) class model_name EczemaModel, elements: model_name: Name model stanmodel: Name Stan model. Used internally locate compiled code. can also used store Stan code filepath. discrete: Whether model discrete . max_score: Maximum value score can take (applicable) K: Number categories (applicable) prior: List parameters' priors","code":""},{"path":"/reference/EczemaModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EczemaModel constructor — EczemaModel","text":"","code":"EczemaModel(\"BinRW\", max_score = 10) #> BinRW model (discrete) #> max_score = 10  #> Prior:  #> - sigma ~ normal+(0,0.4) #> - mu_logit_y0 ~ normal(0,1) #> - sigma_logit_y0 ~ normal(0,1.5)"},{"path":"/reference/EczemaPred-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'EczemaPred' package. — EczemaPred-package","title":"The 'EczemaPred' package. — EczemaPred-package","text":"collection models serve building blocks predicting eczema severity.","code":""},{"path":"/reference/EczemaPred-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'EczemaPred' package. — EczemaPred-package","text":"Stan Development Team (2020). RStan: R interface Stan. R package version 2.21.2.","code":""},{"path":"/reference/MC.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain model — MC","title":"Markov Chain model — MC","text":"details see Markov Chain vignette.","code":""},{"path":"/reference/MC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain model — MC","text":"K Number states Markov Chain prior Named list model's priors. NULL, uses default prior model (see default_prior()).","code":""},{"path":"/reference/MC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Markov Chain model — MC","text":"Details model available paper.","code":""},{"path":"/reference/MC.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Markov Chain model — MC","text":"p: matrix size K * K p[, j] represents transition probabilities state state j. See list_parameters(model = \"MC\") details.","code":""},{"path":"/reference/MC.html","id":"priors","dir":"Reference","previous_headings":"","what":"Priors","title":"Markov Chain model — MC","text":"priors passed named list element p. transition probabilities state p[, ] assumed follow Dirichlet distribution. prior matrix line correspond parameters Dirichlet distribution p[, ].","code":""},{"path":"/reference/MC.html","id":"default-priors","dir":"Reference","previous_headings":"","what":"Default priors","title":"Markov Chain model — MC","text":"default prior p[, ] symmetric uniform Dirichlet distribution (concentration parameters equal 1).","code":""},{"path":"/reference/MC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain model — MC","text":"","code":"EczemaModel(\"MC\", K = 5) #> MC model (discrete) #> 5 categories  #> Prior:  #> - p[1, ] ~ dirichlet(1,1,1,1,1) #> - p[2, ] ~ dirichlet(1,1,1,1,1) #> - p[3, ] ~ dirichlet(1,1,1,1,1) #> - p[4, ] ~ dirichlet(1,1,1,1,1) #> - p[5, ] ~ dirichlet(1,1,1,1,1)"},{"path":"/reference/MixedAR1.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed effect autoregressive model (order 1) — MixedAR1","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"Mixed effect autoregressive model (order 1)","code":""},{"path":"/reference/MixedAR1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"max_score Maximum value score can take. Note even discrete=FALSE, max_score must integer. discrete Whether use discrete normal distribution. used check whether data discrete , rounding predictions (cf. testing). prior Named list model's priors. NULL, uses default prior model (see default_prior()).","code":""},{"path":"/reference/MixedAR1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"Details model available paper. model takes input continuous score defined 0 max_score. model naive likelihood non-truncated discretised (discrete = TRUE). Unlike AR1 model, discretisation predictions implemented details see vignette.","code":""},{"path":[]},{"path":"/reference/MixedAR1.html","id":"population-parameters-","dir":"Reference","previous_headings":"","what":"Population parameters:","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"sigma: Standard deviation autoregression mu_logit_slope: Population mean logit slope sigma_logit_slope: Population standard deviation logit slope mu_inf: Population mean y_inf sigma_inf: Population standard deviation y_inf","code":""},{"path":"/reference/MixedAR1.html","id":"patient-dependent-parameters-","dir":"Reference","previous_headings":"","what":"Patient-dependent parameters:","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"slope: Autocorrelation parameter y_inf: Autoregression mean intercept: Intercept","code":""},{"path":"/reference/MixedAR1.html","id":"other-parameters-","dir":"Reference","previous_headings":"","what":"Other parameters:","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"y_mis: Missing values See list_parameters(model = \"MixedAR1\") details.","code":""},{"path":"/reference/MixedAR1.html","id":"priors","dir":"Reference","previous_headings":"","what":"Priors","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"priors passed named list elements sigma, mu_logit_slope, sigma_logit_slope, mu_inf, sigma_inf specifying priors corresponding parameters. element list vector length 2, containing values x1 x2, x2 > 0, : sigma / max_score ~ normal+(x1, x2). mu_logit_slope ~ normal(x1, x2). sigma_logit_slope ~ normal+(x1, x2). mu_inf / max_score ~ normal(x1, x2). sigma_inf / max_score ~ normal+(x1, x2). NB: sigma, sigma_logit_slope sigma_inf, usually x1=0 define half-normal distribution since parameter constrained positive.","code":""},{"path":"/reference/MixedAR1.html","id":"default-priors","dir":"Reference","previous_headings":"","what":"Default priors","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"default prior sigma translates width predictive distribution max_score. default priors mu_logit_slope sigma_logit_slope \"reasonable\" ranges translate prior slope approximately uniform. default prior mu_inf spans entire range score. default prior sigma_inf translates range distribution y_inf max_score.","code":""},{"path":"/reference/MixedAR1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed effect autoregressive model (order 1) — MixedAR1","text":"","code":"EczemaModel(\"MixedAR1\", max_score = 100) #> MixedAR1 model (continuous) #> max_score = 100  #> Prior:  #> - sigma / max_score ~ normal+(0,0.1) #> - mu_logit_slope ~ normal(0,1) #> - sigma_logit_slope ~ normal+(0,1.5) #> - mu_inf / max_score ~ normal(0.5,0.25) #> - sigma_inf / max_score ~ normal+(0.5,0.25)"},{"path":"/reference/OrderedRW.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordered Logistic random walk model — OrderedRW","title":"Ordered Logistic random walk model — OrderedRW","text":"state-space model defined Ordered logistic measurement error distribution latent random walk. details see BinRW vignette.","code":""},{"path":"/reference/OrderedRW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordered Logistic random walk model — OrderedRW","text":"max_score Maximum value score can take prior Named list model's priors. NULL, uses default prior model (see default_prior()).","code":""},{"path":"/reference/OrderedRW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ordered Logistic random walk model — OrderedRW","text":"Details model available paper.","code":""},{"path":[]},{"path":"/reference/OrderedRW.html","id":"population-parameters-","dir":"Reference","previous_headings":"","what":"Population parameters:","title":"Ordered Logistic random walk model — OrderedRW","text":"sigma_lat: Standard deviation random walk sigma_meas: Standard deviation (scale) logistic distribution ([0, max_score] space) sigma_tot: Total standard deviation prediction one step ahead rho2: Proportion measurement variance total variance. can interpreted similarly R-squared, proportion explained variance (variance measurements) total variance. mu_y0: Population mean y0 (initial condition). sigma_y0: Population standard deviation y0 (initial condition). delta: Relative difference cutpoints (simplex length max_score - 1) ct: Cutpoints (vector length max_score, [0, max_score] space)","code":""},{"path":"/reference/OrderedRW.html","id":"patient-dependent-parameters-","dir":"Reference","previous_headings":"","what":"Patient-dependent parameters:","title":"Ordered Logistic random walk model — OrderedRW","text":"y0: initial latent score (y_lat t0).","code":""},{"path":"/reference/OrderedRW.html","id":"observation-dependent-patient-and-time-dependent-parameters-","dir":"Reference","previous_headings":"","what":"Observation-dependent (patient- and time-dependent) parameters:","title":"Ordered Logistic random walk model — OrderedRW","text":"y_lat: Latent score ([0, max_score] space) See list_parameters(model = \"OrderedRW\") details.","code":""},{"path":"/reference/OrderedRW.html","id":"priors","dir":"Reference","previous_headings":"","what":"Priors","title":"Ordered Logistic random walk model — OrderedRW","text":"priors passed named list elements delta, sigma_lat, sigma_meas, mu_y0 sigma_y0 specifying priors corresponding parameters. element delta vector X1 length max_score - 1, elements X1 positive delta ~ dirichlet(X1). latent score can interpreted original [0, max_score] space, priors parameters specified normalised max_score. priors defined vector length 2, containing values x1 x2, x2 > 0, : sigma_meas / max_score ~ lognormal(x1, x2) sigma_lat / max_score ~ lognormal(x1, x2) mu_y0 ~ normal(x1, x2) sigma_y0 ~ normal+(x1, x2) NB: lognormal distribution, x1 corresponds mean log x2 sd log. NB: sigma_y0 constrained positive x1 usually set 0 define half-normal distribution.","code":""},{"path":"/reference/OrderedRW.html","id":"default-priors","dir":"Reference","previous_headings":"","what":"Default priors","title":"Ordered Logistic random walk model — OrderedRW","text":"default prior delta uniform symmetric Dirichlet distribution concentration 2. default priors sigma_meas sigma_lat lognormal distribution translate 95% CI approximately [.02, 0.40] * M. prior sigma_lat thus allows fast slow transitions state y = 0 likely outcome state y = M likely outcome. prior sigma_meas allows precise imprecise measurements. default priors mu_y0 sigma_y0 reasonable ranges translate approximately uniform prior range score y0.","code":""},{"path":"/reference/OrderedRW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordered Logistic random walk model — OrderedRW","text":"","code":"EczemaModel(\"OrderedRW\", max_score = 10) #> OrderedRW model (discrete) #> max_score = 10  #> Prior:  #> - delta ~ dirichlet(2,2,2,2,2,2,2,2,2) #> - sigma_meas / max_score ~ lognormal(-2.3,0.69) #> - sigma_lat / max_score ~ lognormal(-2.3,0.69) #> - mu_y0 / max_score ~ normal(0.5,0.25) #> - sigma_y0 / max_score ~ normal+(0,0.12)"},{"path":"/reference/RW.html","id":null,"dir":"Reference","previous_headings":"","what":"Random walk model — RW","title":"Random walk model — RW","text":"Random walk model","code":""},{"path":"/reference/RW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random walk model — RW","text":"max_score Maximum value score can take discrete Whether use discrete normal distribution. used check whether data discrete , rounding predictions (cf. testing). prior Named list model's priors. NULL, uses default prior model (see default_prior()).","code":""},{"path":"/reference/RW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random walk model — RW","text":"Details model available paper. model takes input continuous score defined 0 max_score. model naive likelihood non-truncated discretised (discrete = TRUE). result, sampling prior predictive distribution can challenging score near bounds variance sufficiently large. details see vignette.","code":""},{"path":"/reference/RW.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Random walk model — RW","text":"sigma: Standard deviation random walk y_mis: Missing values See list_parameters(model = \"RW\") details.","code":""},{"path":"/reference/RW.html","id":"priors","dir":"Reference","previous_headings":"","what":"Priors","title":"Random walk model — RW","text":"priors passed named list element sigma specifying priors corresponding parameter, sigma / max_score ~ normal+(x1, x2) element sigma list vector length two containing x1 x2. NB: usually x1=0 define half-normal distribution (sigma constraint positive) x2 positive.","code":""},{"path":"/reference/RW.html","id":"default-priors","dir":"Reference","previous_headings":"","what":"Default priors","title":"Random walk model — RW","text":"default prior sigma translates width predictive distribution max_score.","code":""},{"path":"/reference/RW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random walk model — RW","text":"","code":"EczemaModel(\"RW\", max_score = 100, discrete = FALSE) #> RW model (continuous) #> max_score = 100  #> Prior:  #> - sigma / max_score ~ normal+(0,0.1)"},{"path":"/reference/Smoothing.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential smoothing model — Smoothing","title":"Exponential smoothing model — Smoothing","text":"Exponential smoothing model","code":""},{"path":"/reference/Smoothing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential smoothing model — Smoothing","text":"max_score Maximum value score can take discrete Whether use discrete normal distribution. used check whether data discrete , rounding predictions (cf. testing). prior Named list model's priors. NULL, uses default prior model (see default_prior()).","code":""},{"path":"/reference/Smoothing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential smoothing model — Smoothing","text":"Details model available paper. model takes input continuous score defined 0 max_score. model naive likelihood non-truncated discretised (discrete = TRUE). result, sampling prior predictive distribution can challenging score near bounds variance sufficiently large. details see vignette.","code":""},{"path":"/reference/Smoothing.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Exponential smoothing model — Smoothing","text":"sigma: Standard deviation random walk alpha: Smoothing factor tau: Time constant associated smoothing factor y_mis: Missing values See list_parameters(model = \"Smoothing\") details.","code":""},{"path":"/reference/Smoothing.html","id":"priors","dir":"Reference","previous_headings":"","what":"Priors","title":"Exponential smoothing model — Smoothing","text":"priors passed named list elements sigma tau specifying priors corresponding parameters. element list vector length 2, containing values x1 x2, x2 > 0, : sigma / max_score ~ normal+(x1, x2). tau ~ lognormal(x1, x2). NB: sigma, usually x1=0 define half-normal distribution since parameter constrained positive.","code":""},{"path":"/reference/Smoothing.html","id":"default-priors","dir":"Reference","previous_headings":"","what":"Default priors","title":"Exponential smoothing model — Smoothing","text":"default prior sigma translates width predictive distribution max_score. default prior tau assumes range less 1 100 (time units).","code":""},{"path":"/reference/Smoothing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential smoothing model — Smoothing","text":"","code":"EczemaModel(\"Smoothing\", max_score = 100) #> Smoothing model (continuous) #> max_score = 100  #> Prior:  #> - sigma / max_score ~ normal+(0,0.1) #> - tau ~ lognormal(1.2,1.7)"},{"path":"/reference/add_broken_pointline.html","id":null,"dir":"Reference","previous_headings":"","what":"Add broken pointline to ggplot — add_broken_pointline","title":"Add broken pointline to ggplot — add_broken_pointline","text":"Add broken pointline ggplot","code":""},{"path":"/reference/add_broken_pointline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add broken pointline to ggplot — add_broken_pointline","text":"","code":"add_broken_pointline(df, aes_x = \"x\", aes_y = \"y\", size = 1, ...)"},{"path":"/reference/add_broken_pointline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add broken pointline to ggplot — add_broken_pointline","text":"df Data columns aes_x aes_y. aes_x Name x aesthetic. aes_y Name y aesthetic. size Size line points. ... aesthetics pass ggplot2::aes_(). Valid aesthetics aesthetics ggplot2::geom_path() ggplot2::geom_point() (except size fixed). NB: want colour change Group need add colour = .name(Group).","code":""},{"path":"/reference/add_broken_pointline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add broken pointline to ggplot — add_broken_pointline","text":"List add ggplot.","code":""},{"path":"/reference/add_broken_pointline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add broken pointline to ggplot — add_broken_pointline","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2)  df1 <- tibble(x = 1:100, y = cumsum(rnorm(100))) %>%   slice_sample(prop = .8) %>%   arrange(x)  ggplot() +   add_broken_pointline(df1) +   theme_bw(base_size = 15) #> Warning: Removed 20 rows containing missing values (`geom_point()`).   df2 <- mutate(df1, Group = case_when(x < 60 ~ \"A\", TRUE ~ \"B\"))  ggplot() +   add_broken_pointline(df2, colour = as.name(\"Group\")) +   scale_colour_discrete(na.translate = FALSE) +   theme_bw(base_size = 15) #> Warning: Removed 20 rows containing missing values (`geom_path()`). #> Warning: Removed 20 rows containing missing values (`geom_point()`)."},{"path":"/reference/add_fanchart.html","id":null,"dir":"Reference","previous_headings":"","what":"Add fanchart to ggplot — add_fanchart","title":"Add fanchart to ggplot — add_fanchart","text":"fanchart obtained overlaying ggplot2::geom_ribbon() different widths (corresponding different levels). function geom.","code":""},{"path":"/reference/add_fanchart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add fanchart to ggplot — add_fanchart","text":"","code":"add_fanchart(   df,   aes_x = \"Time\",   aes_ymin = \"Lower\",   aes_ymax = \"Upper\",   aes_fill = \"Level\",   legend_fill = c(\"continuous\", \"discrete\"),   labs_fill = ifelse(legend_fill == \"continuous\", \"Confidence level\", \"Probability\"),   palette = c(\"#EFF3FF\", \"#C6DBEF\", \"#9ECAE1\", \"#6BAED6\", \"#3182BD\", \"#08519C\") )"},{"path":"/reference/add_fanchart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add fanchart to ggplot — add_fanchart","text":"df Data columns aes_x, aes_ymin, aes_ymax aes_fill aes_x Name x aesthetic aes_ymin Name ymin aesthetic aes_ymax Name ymax aesthetic aes_fill Name fill aesthetic legend_fill Whether legend displayed continuous discrete categories labs_fill Name give legend palette Colour palette use. default single-hue blue palette RColorBrewer::brewer.pal(n = 6, \"Blues\").","code":""},{"path":"/reference/add_fanchart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add fanchart to ggplot — add_fanchart","text":"List added ggplot","code":""},{"path":"/reference/add_fanchart.html","id":"alternative","dir":"Reference","previous_headings":"","what":"Alternative","title":"Add fanchart to ggplot — add_fanchart","text":"similar result can obtained using ggdist::geom_lineribbon(), difference ggdist function also plots point estimate (proper geom). avoid plotting point estimate, size can set 0 y = .lower example.","code":""},{"path":"/reference/add_fanchart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add fanchart to ggplot — add_fanchart","text":"","code":"library(dplyr) library(tidyr) library(ggplot2)  tmp <- tibble(Time = 0:10,               y = Time^1.5) %>%   expand_grid(Level = seq(0.1, 0.9, 0.2)) %>%   mutate(Width = qnorm(0.5 + Level / 2, sd = 2),          Lower = y - Width,          Upper = y + Width) ggplot() + add_fanchart(tmp)"},{"path":"/reference/add_historical_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance of (population) historical forecast — add_historical_pred","title":"Performance of (population) historical forecast — add_historical_pred","text":"Performance (population) historical forecast","code":""},{"path":"/reference/add_historical_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance of (population) historical forecast — add_historical_pred","text":"","code":"add_historical_pred(   test,   train,   max_score,   discrete = TRUE,   add_uniform = TRUE,   include_samples = FALSE,   n_samples = NULL )"},{"path":"/reference/add_historical_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance of (population) historical forecast — add_historical_pred","text":"test Testing dataframe. requirements contains column \"Score\". train Training dataframe. requirements contains column \"Score\". max_score Maximum value score can take discrete Whether estimate discrete continuous historical forecast add_uniform Whether include samples uniform distribution computing discrete historical forecast. ensures states visited. include_samples Whether return samples historical forecast output n_samples include_samples=TRUE, many samples return. NULL, function return training set.","code":""},{"path":"/reference/add_historical_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance of (population) historical forecast — add_historical_pred","text":"Dataframe test appended columns \"lpd\", \"RPS\" (CRPS discrete=FALSE) optionally \"Samples\"","code":""},{"path":"/reference/add_historical_pred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performance of (population) historical forecast — add_historical_pred","text":"continuous historical forecast calculated considering training set samples predictive distribution.","code":""},{"path":"/reference/add_historical_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance of (population) historical forecast — add_historical_pred","text":"","code":"max_score <- 100 train <- data.frame(Score = rbinom(1e2, max_score, 0.2)) test <- data.frame(Score = rbinom(1e2, max_score, 0.5)) add_historical_pred(test, train, max_score) #>     Score       lpd        RPS #> 1      40 -5.303305 0.09710626 #> 2      51 -5.303305 0.14690725 #> 3      51 -5.303305 0.14690725 #> 4      55 -5.303305 0.16800178 #> 5      49 -5.303305 0.13695701 #> 6      60 -5.303305 0.19660875 #> 7      55 -5.303305 0.16800178 #> 8      53 -5.303305 0.15725551 #> 9      46 -5.303305 0.12277790 #> 10     50 -5.303305 0.14188238 #> 11     40 -5.303305 0.09710626 #> 12     55 -5.303305 0.16800178 #> 13     56 -5.303305 0.17352417 #> 14     52 -5.303305 0.15203163 #> 15     53 -5.303305 0.15725551 #> 16     55 -5.303305 0.16800178 #> 17     44 -5.303305 0.11382268 #> 18     46 -5.303305 0.12277790 #> 19     53 -5.303305 0.15725551 #> 20     45 -5.303305 0.11825054 #> 21     48 -5.303305 0.13213114 #> 22     58 -5.303305 0.18486745 #> 23     61 -5.303305 0.20262865 #> 24     43 -5.303305 0.10949432 #> 25     50 -5.303305 0.14188238 #> 26     48 -5.303305 0.13213114 #> 27     44 -5.303305 0.11382268 #> 28     42 -5.303305 0.10526546 #> 29     50 -5.303305 0.14188238 #> 30     47 -5.303305 0.12740477 #> 31     49 -5.303305 0.13695701 #> 32     47 -5.303305 0.12740477 #> 33     54 -5.303305 0.16257890 #> 34     60 -5.303305 0.19660875 #> 35     40 -5.303305 0.09710626 #> 36     59 -5.303305 0.19068835 #> 37     53 -5.303305 0.15725551 #> 38     52 -5.303305 0.15203163 #> 39     55 -5.303305 0.16800178 #> 40     46 -5.303305 0.12277790 #> 41     48 -5.303305 0.13213114 #> 42     49 -5.303305 0.13695701 #> 43     39 -5.303305 0.09317591 #> 44     55 -5.303305 0.16800178 #> 45     48 -5.303305 0.13213114 #> 46     60 -5.303305 0.19660875 #> 47     51 -5.303305 0.14690725 #> 48     49 -5.303305 0.13695701 #> 49     56 -5.303305 0.17352417 #> 50     49 -5.303305 0.13695701 #> 51     51 -5.303305 0.14690725 #> 52     52 -5.303305 0.15203163 #> 53     50 -5.303305 0.14188238 #> 54     53 -5.303305 0.15725551 #> 55     41 -5.303305 0.10113611 #> 56     49 -5.303305 0.13695701 #> 57     67 -5.303305 0.24083760 #> 58     45 -5.303305 0.11825054 #> 59     50 -5.303305 0.14188238 #> 60     47 -5.303305 0.12740477 #> 61     55 -5.303305 0.16800178 #> 62     57 -5.303305 0.17914606 #> 63     47 -5.303305 0.12740477 #> 64     50 -5.303305 0.14188238 #> 65     44 -5.303305 0.11382268 #> 66     46 -5.303305 0.12277790 #> 67     45 -5.303305 0.11825054 #> 68     47 -5.303305 0.12740477 #> 69     43 -5.303305 0.10949432 #> 70     49 -5.303305 0.13695701 #> 71     49 -5.303305 0.13695701 #> 72     51 -5.303305 0.14690725 #> 73     49 -5.303305 0.13695701 #> 74     50 -5.303305 0.14188238 #> 75     50 -5.303305 0.14188238 #> 76     47 -5.303305 0.12740477 #> 77     55 -5.303305 0.16800178 #> 78     51 -5.303305 0.14690725 #> 79     50 -5.303305 0.14188238 #> 80     55 -5.303305 0.16800178 #> 81     58 -5.303305 0.18486745 #> 82     59 -5.303305 0.19068835 #> 83     51 -5.303305 0.14690725 #> 84     45 -5.303305 0.11825054 #> 85     52 -5.303305 0.15203163 #> 86     50 -5.303305 0.14188238 #> 87     53 -5.303305 0.15725551 #> 88     59 -5.303305 0.19068835 #> 89     43 -5.303305 0.10949432 #> 90     58 -5.303305 0.18486745 #> 91     46 -5.303305 0.12277790 #> 92     37 -5.303305 0.08561372 #> 93     54 -5.303305 0.16257890 #> 94     43 -5.303305 0.10949432 #> 95     38 -5.303305 0.08934507 #> 96     39 -5.303305 0.09317591 #> 97     46 -5.303305 0.12277790 #> 98     48 -5.303305 0.13213114 #> 99     56 -5.303305 0.17352417 #> 100    42 -5.303305 0.10526546"},{"path":"/reference/add_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Append lpd and (C)RPS to (test) dataframe — add_metrics","title":"Append lpd and (C)RPS to (test) dataframe — add_metrics","text":"add_metrics1_d() add_metrics1_c() extracts lpd RPS Stanfit object add_metrics2_d() add_metrics2_c() calculates lpd (C)RPS empirical pmf metrics add_metrics2_c() CRPS add_metrics1_c() calculated using scoringRules package.","code":""},{"path":"/reference/add_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append lpd and (C)RPS to (test) dataframe — add_metrics","text":"","code":"add_metrics1_d(df, fit)  add_metrics1_c(df, fit)  add_metrics2_d(df, support, add_samples = support)  add_metrics2_c(df, add_samples = NULL, bw = NULL)"},{"path":"/reference/add_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append lpd and (C)RPS to (test) dataframe — add_metrics","text":"df Dataframe add metrics add_metrics1_c(), must contain column \"Score\". add_metrics2_c() add_metrics2_d(), must contain columns \"Samples\" \"Score\". fit Stanfit object parameters \"lpd\", add_metrics1_d() \"cum_err\". support Support distribution add_samples Numeric vector used initialise distribution computing lpd (C)RPS. example, can used add uniform distribution vector samples, avoid problems tail distribution. NULL, empirical pmf changed. Default uniform distribution (.e. support) add_metrics2_d() NULL add_metrics2_c(). column \"Samples\" modified add_samples NULL. bw Bandwidth, calculating lpd, see scoringRules::logs_sample(). Useful set \"resolution\" distribution.","code":""},{"path":"/reference/add_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append lpd and (C)RPS to (test) dataframe — add_metrics","text":"Dataframe df appended columns \"lpd\", \"RPS\" (\"CRPS\" add_metrics1_c() add_metrics2_d()).","code":""},{"path":[]},{"path":"/reference/add_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Append lpd, (C)RPS and predictive samples to (test) dataframe — add_predictions","title":"Append lpd, (C)RPS and predictive samples to (test) dataframe — add_predictions","text":"Append lpd, (C)RPS predictive samples (test) dataframe","code":""},{"path":"/reference/add_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append lpd, (C)RPS and predictive samples to (test) dataframe — add_predictions","text":"","code":"add_predictions(   df,   fit,   discrete = TRUE,   include_samples = FALSE,   n_samples = NULL )"},{"path":"/reference/add_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append lpd, (C)RPS and predictive samples to (test) dataframe — add_predictions","text":"df Dataframe. discrete = FALSE, must contain column \"Score\". fit Stanfit object discrete Whether estimate discrete continuous forecast. discrete forecast, RPS computed CRPS continuous forecast. include_samples Whether return samples historical forecast output n_samples include_samples=TRUE, many samples return. Default (=NULL) samples.","code":""},{"path":"/reference/add_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append lpd, (C)RPS and predictive samples to (test) dataframe — add_predictions","text":"Dataframe df appended columns \"lpd\", \"RPS\" (CRPS discrete=FALSE) optionally \"Samples\"","code":""},{"path":[]},{"path":"/reference/add_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Add prior to the list serving as input to the Stan sampler — add_prior","title":"Add prior to the list serving as input to the Stan sampler — add_prior","text":"Used internally","code":""},{"path":"/reference/add_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add prior to the list serving as input to the Stan sampler — add_prior","text":"","code":"add_prior(data_stan, prior, prefix = \"prior_\")"},{"path":"/reference/add_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add prior to the list serving as input to the Stan sampler — add_prior","text":"data_stan List prior named list corresponding parameters' prior prefix Prefix add names prior","code":""},{"path":"/reference/add_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add prior to the list serving as input to the Stan sampler — add_prior","text":"data_stan additional items corresponding prior.","code":""},{"path":"/reference/add_uniform_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance of a uniform forecast — add_uniform_pred","title":"Performance of a uniform forecast — add_uniform_pred","text":"Performance uniform forecast","code":""},{"path":"/reference/add_uniform_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance of a uniform forecast — add_uniform_pred","text":"","code":"add_uniform_pred(   test,   max_score,   discrete = TRUE,   include_samples = FALSE,   n_samples = NULL )"},{"path":"/reference/add_uniform_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance of a uniform forecast — add_uniform_pred","text":"test Testing dataframe. requirements contains column \"Score\". max_score Maximum value score can take discrete Whether estimate discrete continuous historical forecast include_samples Whether return samples historical forecast output n_samples include_samples=TRUE, many samples return. NULL, samples 0:max_score returned.","code":""},{"path":"/reference/add_uniform_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance of a uniform forecast — add_uniform_pred","text":"Dataframe test appended columns \"lpd\", \"RPS\" (CRPS discrete=FALSE) optionally \"Samples\"","code":""},{"path":"/reference/add_uniform_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance of a uniform forecast — add_uniform_pred","text":"","code":"max_score <- 100 test <- data.frame(Score = rbinom(1e2, max_score, 0.5)) add_uniform_pred(test, max_score) #>     Score       lpd        RPS #> 1      44 -4.615121 0.08772277 #> 2      52 -4.615121 0.08455446 #> 3      53 -4.615121 0.08504950 #> 4      49 -4.615121 0.08425743 #> 5      50 -4.615121 0.08415842 #> 6      61 -4.615121 0.09613861 #> 7      38 -4.615121 0.09841584 #> 8      49 -4.615121 0.08425743 #> 9      53 -4.615121 0.08504950 #> 10     54 -4.615121 0.08574257 #> 11     61 -4.615121 0.09613861 #> 12     49 -4.615121 0.08425743 #> 13     55 -4.615121 0.08663366 #> 14     47 -4.615121 0.08504950 #> 15     52 -4.615121 0.08455446 #> 16     54 -4.615121 0.08574257 #> 17     50 -4.615121 0.08415842 #> 18     57 -4.615121 0.08900990 #> 19     47 -4.615121 0.08504950 #> 20     48 -4.615121 0.08455446 #> 21     52 -4.615121 0.08455446 #> 22     52 -4.615121 0.08455446 #> 23     55 -4.615121 0.08663366 #> 24     49 -4.615121 0.08425743 #> 25     52 -4.615121 0.08455446 #> 26     51 -4.615121 0.08425743 #> 27     52 -4.615121 0.08455446 #> 28     47 -4.615121 0.08504950 #> 29     50 -4.615121 0.08415842 #> 30     56 -4.615121 0.08772277 #> 31     55 -4.615121 0.08663366 #> 32     47 -4.615121 0.08504950 #> 33     51 -4.615121 0.08425743 #> 34     48 -4.615121 0.08455446 #> 35     52 -4.615121 0.08455446 #> 36     53 -4.615121 0.08504950 #> 37     57 -4.615121 0.08900990 #> 38     51 -4.615121 0.08425743 #> 39     52 -4.615121 0.08455446 #> 40     51 -4.615121 0.08425743 #> 41     54 -4.615121 0.08574257 #> 42     47 -4.615121 0.08504950 #> 43     47 -4.615121 0.08504950 #> 44     48 -4.615121 0.08455446 #> 45     45 -4.615121 0.08663366 #> 46     42 -4.615121 0.09049505 #> 47     49 -4.615121 0.08425743 #> 48     44 -4.615121 0.08772277 #> 49     46 -4.615121 0.08574257 #> 50     46 -4.615121 0.08574257 #> 51     55 -4.615121 0.08663366 #> 52     51 -4.615121 0.08425743 #> 53     54 -4.615121 0.08574257 #> 54     47 -4.615121 0.08504950 #> 55     57 -4.615121 0.08900990 #> 56     38 -4.615121 0.09841584 #> 57     44 -4.615121 0.08772277 #> 58     52 -4.615121 0.08455446 #> 59     51 -4.615121 0.08425743 #> 60     49 -4.615121 0.08425743 #> 61     56 -4.615121 0.08772277 #> 62     45 -4.615121 0.08663366 #> 63     49 -4.615121 0.08425743 #> 64     42 -4.615121 0.09049505 #> 65     52 -4.615121 0.08455446 #> 66     39 -4.615121 0.09613861 #> 67     51 -4.615121 0.08425743 #> 68     56 -4.615121 0.08772277 #> 69     48 -4.615121 0.08455446 #> 70     55 -4.615121 0.08663366 #> 71     58 -4.615121 0.09049505 #> 72     48 -4.615121 0.08455446 #> 73     51 -4.615121 0.08425743 #> 74     39 -4.615121 0.09613861 #> 75     59 -4.615121 0.09217822 #> 76     50 -4.615121 0.08415842 #> 77     54 -4.615121 0.08574257 #> 78     53 -4.615121 0.08504950 #> 79     51 -4.615121 0.08425743 #> 80     42 -4.615121 0.09049505 #> 81     46 -4.615121 0.08574257 #> 82     51 -4.615121 0.08425743 #> 83     45 -4.615121 0.08663366 #> 84     49 -4.615121 0.08425743 #> 85     47 -4.615121 0.08504950 #> 86     46 -4.615121 0.08574257 #> 87     50 -4.615121 0.08415842 #> 88     49 -4.615121 0.08425743 #> 89     39 -4.615121 0.09613861 #> 90     49 -4.615121 0.08425743 #> 91     52 -4.615121 0.08455446 #> 92     60 -4.615121 0.09405941 #> 93     47 -4.615121 0.08504950 #> 94     46 -4.615121 0.08574257 #> 95     54 -4.615121 0.08574257 #> 96     48 -4.615121 0.08455446 #> 97     47 -4.615121 0.08504950 #> 98     43 -4.615121 0.08900990 #> 99     47 -4.615121 0.08504950 #> 100    49 -4.615121 0.08425743"},{"path":"/reference/default_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Default prior — default_prior","title":"Default prior — default_prior","text":"Default prior","code":""},{"path":"/reference/default_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default prior — default_prior","text":"","code":"default_prior(model, ...)  # S3 method for character default_prior(model, max_score = 2, K = 2, ...)"},{"path":"/reference/default_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default prior — default_prior","text":"model Object ... Arguments pass methods max_score Maximum value score can take K Number categories","code":""},{"path":"/reference/default_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default prior — default_prior","text":"Named list parameters' priors. details, see generic model class.","code":""},{"path":"/reference/default_prior.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Default prior — default_prior","text":"default_prior(character): function creates EczemaModel object call corresponding method.","code":""},{"path":"/reference/default_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default prior — default_prior","text":"","code":"default_prior(EczemaModel(\"BinRW\", max_score = 10)) #> $sigma #> [1] 0.0000000 0.4023595 #>  #> $mu_logit_y0 #> [1] 0 1 #>  #> $sigma_logit_y0 #> [1] 0.0 1.5 #>  default_prior(EczemaModel(\"MC\", K = 10)) #> $p #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1    1    1    1    1    1    1    1    1     1 #>  [2,]    1    1    1    1    1    1    1    1    1     1 #>  [3,]    1    1    1    1    1    1    1    1    1     1 #>  [4,]    1    1    1    1    1    1    1    1    1     1 #>  [5,]    1    1    1    1    1    1    1    1    1     1 #>  [6,]    1    1    1    1    1    1    1    1    1     1 #>  [7,]    1    1    1    1    1    1    1    1    1     1 #>  [8,]    1    1    1    1    1    1    1    1    1     1 #>  [9,]    1    1    1    1    1    1    1    1    1     1 #> [10,]    1    1    1    1    1    1    1    1    1     1 #>  default_prior(\"BinRW\") #> default prior for max_score=2 (or, when applicable K=2) #> $sigma #> [1] 0.0000000 0.4023595 #>  #> $mu_logit_y0 #> [1] 0 1 #>  #> $sigma_logit_y0 #> [1] 0.0 1.5 #>"},{"path":"/reference/extract_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract lpd (predictive log-likelihood) and RPS from stanfit object — extract_metric","title":"Extract lpd (predictive log-likelihood) and RPS from stanfit object — extract_metric","text":"metrics computed expected forecast distribution. lpd defined continuous discrete outcomes. RPS defined discrete outcomes computed extracting cumulative error distribution (cum_err: cumulative forecast - cumulative distribution), taking expected value (cf. expected forecast), squaring apply, summing possible outcomes normalising number outcomes - 1.","code":""},{"path":"/reference/extract_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract lpd (predictive log-likelihood) and RPS from stanfit object — extract_metric","text":"","code":"extract_loglikelihood(fit, par_name = \"log_lik\")  extract_lpd(fit)  extract_RPS(fit, par_name = \"cum_err\")"},{"path":"/reference/extract_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract lpd (predictive log-likelihood) and RPS from stanfit object — extract_metric","text":"fit Stanfit object par_name Name parameter parameter Stan model. Usually lpd, log_lik (log likelihood data) cum_err.","code":""},{"path":"/reference/extract_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract lpd (predictive log-likelihood) and RPS from stanfit object — extract_metric","text":"Vector lpd/RPS prediction","code":""},{"path":"/reference/extract_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract parameters posterior summary statistics — extract_parameters","title":"Extract parameters posterior summary statistics — extract_parameters","text":"Extract parameters posterior summary statistics","code":""},{"path":"/reference/extract_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract parameters posterior summary statistics — extract_parameters","text":"","code":"extract_parameters(fit, pars = NULL, id = NULL, ...)"},{"path":"/reference/extract_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract parameters posterior summary statistics — extract_parameters","text":"fit Stanfit object pars Named list parameters extract. See list_parameters(). NULL, extracts parameters model. id Dataframe associating Index (Patient, Time) pairs. See get_index(). id used pars = NULL pars contain element PatientTime. ... Arguments pass HuraultMisc::summary_statistics().","code":""},{"path":"/reference/extract_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract parameters posterior summary statistics — extract_parameters","text":"Tibble dataframe containing posterior summary statistics. See details HuraultMisc::summary_statistics(). Additional columns Patient Time id NULL.","code":""},{"path":"/reference/extract_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract parameters posterior summary statistics — extract_parameters","text":"","code":"if (FALSE) { model <- EczemaModel(\"BinRW\", max_score = 100) id <- get_index2(rpois(10, 20)) train <- id %>% mutate(Score = rbinom(nrow(.), 100, .5)) fit <- EczemaFit(model, train) extract_parameters(fit, pars = list_parameters(\"BinRW\"), id = id) }"},{"path":"/reference/extract_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract simulations — extract_simulations","title":"Extract simulations — extract_simulations","text":"Extract simulations","code":""},{"path":"/reference/extract_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract simulations — extract_simulations","text":"","code":"extract_simulations(fit, id, draw, pars = NULL)"},{"path":"/reference/extract_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract simulations — extract_simulations","text":"fit Stanfit object id Dataframe linking index Stan model (Patient, Time) pairs, cf. output get_index() draw Draw ID pars Vector parameters extract. Default parameters except y_rep.","code":""},{"path":"/reference/extract_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract simulations — extract_simulations","text":"Named list: Data: dataframe columns Patient, Time, Index, Score corresponding simulations Parameters: dataframe containing parameters used generate data (cf. HuraultMisc::extract_draws())","code":""},{"path":"/reference/extract_simulations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract simulations — extract_simulations","text":"function designed use Markov Chain model (MC).","code":""},{"path":"/reference/forward_chaining.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward chaining — forward_chaining","title":"Forward chaining — forward_chaining","text":"forward chaining setting, retrain/update model every horizon day/week/months/etc. test model next horizon day/week/months/etc., .e. data included next training step. call training/testing steps iterations start iteration 0 first timepoint included. iteration 1, timepoints 1 1 + horizon included.","code":""},{"path":"/reference/forward_chaining.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward chaining — forward_chaining","text":"","code":"get_fc_iteration(t, horizon)  split_fc_dataset(df, it)  detail_fc_training(df, horizon)  get_fc_training_iteration(it_test)"},{"path":"/reference/forward_chaining.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward chaining — forward_chaining","text":"t Vector timepoints horizon Updating horizon df Dataframe columns Patient, Time, Horizon, Iteration. columns Time required detail_fc_training. Iteration number it_test Vector testing iteration numbers","code":""},{"path":"/reference/forward_chaining.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward chaining — forward_chaining","text":"get_fc_iteration returns vector corresponding iteration numbers split_fc_dataset returns named list dataframes (Training Testing) get_fc_training_iteration returns vector unique training iteration number detail_fc_training returns dataframe columns: Iteration, N, Proportion, LastTime","code":""},{"path":"/reference/forward_chaining.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forward chaining — forward_chaining","text":"get_fc_iteration associate vector timepoints t corresponding iteration. split_fc_dataset split dataset df training testing set, computes prediction horizon last available score test set. get_fc_training_iteration identify training iterations test set empty detail_fc_training derive training data characteristics iteration df, including number training observations, proportion training observations total number observations, maximum timepoint training sets. Time=t Iteration=means : Time=t new training data iteration Time=t training data iterations < Time=t testing data iteration -1 Time=t training data iterations >= ","code":""},{"path":"/reference/forward_chaining.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward chaining — forward_chaining","text":"","code":"h <- 2 df <- get_index2(t_max = rpois(10, 10)) df$Score <- rnorm(nrow(df)) df$Iteration <- get_fc_iteration(df$Time, h) sp <- split_fc_dataset(df, 1) train_it <- get_fc_training_iteration(df$Iteration) fc_char <- detail_fc_training(df, h)"},{"path":"/reference/generate_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate missing values in a times-series — generate_missing","title":"Generate missing values in a times-series — generate_missing","text":"First last values missing. Missing indices can generated random (Binomial distribution) using Markov Chain (consecutive missing values deemed likely). markov chain parametrised terms steady state probability value missing probability next value observed current value also observed.","code":""},{"path":"/reference/generate_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate missing values in a times-series — generate_missing","text":"","code":"generate_missing(   N,   type = c(\"random\", \"markovchain\"),   p_mis = 0.25,   p_obs_obs = 0.75 )"},{"path":"/reference/generate_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate missing values in a times-series — generate_missing","text":"N Length time-series type Method generate missing values. One \"random\" \"markovchain\" p_mis Probability given value missing (steady state probability type = \"markovchain\") p_obs_obs Probability next value observed current observed (type = \"markovchain\")","code":""},{"path":"/reference/generate_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate missing values in a times-series — generate_missing","text":"Logical vector length N","code":""},{"path":"/reference/generate_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate missing values in a times-series — generate_missing","text":"","code":"generate_missing(10) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE generate_missing(10, type = \"markovchain\") #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"},{"path":"/reference/get_compiled_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get compiled model — get_compiled_model","title":"Get compiled model — get_compiled_model","text":"Get compiled model","code":""},{"path":"/reference/get_compiled_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get compiled model — get_compiled_model","text":"","code":"get_compiled_model(stanmodel)"},{"path":"/reference/get_compiled_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get compiled model — get_compiled_model","text":"stanmodel Stan model name. NB: may differ name model","code":""},{"path":"/reference/get_compiled_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get compiled model — get_compiled_model","text":"Compiled model (object pass rstan::sampling)","code":""},{"path":"/reference/get_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Associate (Patient, Time) pairs to corresponding index in the model — get_index","title":"Associate (Patient, Time) pairs to corresponding index in the model — get_index","text":"Associate (Patient, Time) pairs corresponding index model","code":""},{"path":"/reference/get_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Associate (Patient, Time) pairs to corresponding index in the model — get_index","text":"","code":"get_index(train, test = NULL)  get_index2(t_max)"},{"path":"/reference/get_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Associate (Patient, Time) pairs to corresponding index in the model — get_index","text":"train Training dataframe test Testing dataframe t_max Vector indicating length patient time-series","code":""},{"path":"/reference/get_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Associate (Patient, Time) pairs to corresponding index in the model — get_index","text":"Dataframe columns Patient, Time, Index","code":""},{"path":"/reference/get_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Associate (Patient, Time) pairs to corresponding index in the model — get_index","text":"functions designed use Markov Chain model (MC).","code":""},{"path":"/reference/get_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Associate (Patient, Time) pairs to corresponding index in the model — get_index","text":"","code":"library(dplyr) id <- get_index2(t_max = rpois(10, 20)) df <- id %>% select(-Index) %>% slice_sample(prop = 0.9) %>% arrange(Patient, Time) get_index(train = df) #> # A tibble: 203 × 3 #>    Patient  Time Index #>      <int> <int> <int> #>  1       1     1     1 #>  2       1     2     2 #>  3       1     3     3 #>  4       1     4     4 #>  5       1     5     5 #>  6       1     6     6 #>  7       1     7     7 #>  8       1     8     8 #>  9       1     9     9 #> 10       1    10    10 #> # ℹ 193 more rows"},{"path":"/reference/list_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"List available parameters — list_parameters","title":"List available parameters — list_parameters","text":"List available parameters","code":""},{"path":"/reference/list_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available parameters — list_parameters","text":"","code":"list_parameters(model, ...)  # S3 method for BinRW list_parameters(model, main = TRUE, ...)  # S3 method for BinMC list_parameters(model, main = TRUE, ...)"},{"path":"/reference/list_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available parameters — list_parameters","text":"model Object, usually model name EczemaModel object ... Arguments pass methods main Whether output main parameters (applicable).","code":""},{"path":"/reference/list_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available parameters — list_parameters","text":"Named list parameters names, grouped broad categories: Population: population parameters (.e. patient- time-independent) Patient: patient-dependent parameters PatientTime: patient- time-dependent parameters (e.g. latent scores) Test: parameters related test set Misc: parameters","code":""},{"path":"/reference/list_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List available parameters — list_parameters","text":"See MC, BinRW, BinMC, OrderedRW, RW, Smoothing, AR1 MixedAR1 details model-specific parameters. parameters available across models: y_rep correspond posterior replications. get corresponding index, use get_index(). y_pred subset y_rep corresponding test samples (size N_test equal number observations test set). lpd log predictive density test samples (size N_test). cum_err cumulative error distribution, available discrete outcomes (matrix dimensions N_test * (max_score  + 1)).","code":""},{"path":"/reference/list_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available parameters — list_parameters","text":"","code":"list_parameters(\"RW\") #> $Population #> [1] \"sigma\" #>  #> $PatientTime #> [1] \"y_rep\" #>  #> $Test #> [1] \"y_pred\" \"lpd\"    #>  #> $Misc #> [1] \"y_mis\" #>  list_parameters(EczemaModel(\"RW\", max_score = 100)) #> $Population #> [1] \"sigma\" #>  #> $PatientTime #> [1] \"y_rep\" #>  #> $Test #> [1] \"y_pred\" \"lpd\"    #>  #> $Misc #> [1] \"y_mis\" #>  list_parameters(EczemaModel(\"BinRW\", max_score = 100)) #> $Population #> [1] \"sigma\"          \"mu_logit_y0\"    \"sigma_logit_y0\" #>  #> $Patient #> [1] \"logit_y0\" #>  #> $PatientTime #> [1] \"y_lat\" \"y_rep\" #>  #> $Observation #> [1] \"log_lik\" #>  #> $Test #> [1] \"y_pred\"  \"lpd\"     \"cum_err\" #>  list_parameters(EczemaModel(\"BinMC\", max_score = 100)) #> $Population #> [1] \"mu_logit_p10\"    \"sigma_logit_p10\" \"sigma\"           #>  #> $Patient #> [1] \"p10\" #>  #> $PatientTime #> [1] \"p01\"    \"lambda\" \"ss1\"    \"y_lat\"  \"y_rep\"  #>  #> $Test #> [1] \"y_pred\"  \"lpd\"     \"cum_err\" #>"},{"path":"/reference/make_empty_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ","title":"Create ","text":"Used internally.","code":""},{"path":"/reference/make_empty_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ","text":"","code":"make_empty_data(N_patient = 1, t_max = c(2), max_score, discrete)"},{"path":"/reference/make_empty_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ","text":"N_patient Number patients datasets t_max Vector size N_patient indicating time-series length patient max_score Maximum value score can take discrete Whether use discrete normal distribution (relevant testing)","code":""},{"path":"/reference/make_empty_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ","text":"List containing \"Training\" \"Testing\" dataframes","code":""},{"path":"/reference/make_empty_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ","text":"","code":"make_empty_data(max_score = 10, discrete = TRUE) #> $Training #> # A tibble: 1 × 3 #>   Patient  Time Score #>     <int> <dbl> <dbl> #> 1       1     1     7 #>  #> $Testing #> # A tibble: 1 × 3 #>   Patient  Time Score #>     <int> <dbl> <dbl> #> 1       1     2     0 #>"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/plot_latent_OrderedRW.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the evolution of the expected latent score of the OrderedRW model — plot_latent_OrderedRW","title":"Plot the evolution of the expected latent score of the OrderedRW model — plot_latent_OrderedRW","text":"Plot evolution expected latent score OrderedRW model","code":""},{"path":"/reference/plot_latent_OrderedRW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the evolution of the expected latent score of the OrderedRW model — plot_latent_OrderedRW","text":"","code":"plot_latent_OrderedRW(fit, id, patient_id, ...)"},{"path":"/reference/plot_latent_OrderedRW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the evolution of the expected latent score of the OrderedRW model — plot_latent_OrderedRW","text":"fit Stanfit object id Dataframe linking index fit (Patient, Time) pairs, cf. output get_index() patient_id Patient ID ... Arguments pass add_fanchart()","code":""},{"path":"/reference/plot_latent_OrderedRW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the evolution of the expected latent score of the OrderedRW model — plot_latent_OrderedRW","text":"Ggplot Horizontal lines correspond expected cut-offs Ribbons correspond CI logistic distribution","code":""},{"path":"/reference/plot_ppc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot posterior predictive trajectory — plot_ppc","title":"Plot posterior predictive trajectory — plot_ppc","text":"Plot probability mass function (suffix _pmf) fanchart (stacked confidence interval, suffix _fanchart). plot_post_traj_* plots posterior predictive trajectory plot_ppc_traj_* overlays observed trajectory posterior predictive trajectory","code":""},{"path":"/reference/plot_ppc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot posterior predictive trajectory — plot_ppc","text":"","code":"plot_post_traj_pmf(   obj,   id,   patient_id,   max_score = NA,   support = NULL,   max_scale = NA )  plot_post_traj_fanchart(   obj,   id,   patient_id,   max_score = NA,   interval = c(\"eti\", \"hdi\"),   CI_level = seq(0.1, 0.9, 0.1),   ... )  plot_ppc_traj_pmf(obj, train, test, patient_id, max_score = NA, ...)  plot_ppc_traj_fanchart(obj, train, test, patient_id, max_score = NA, ...)"},{"path":"/reference/plot_ppc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot posterior predictive trajectory — plot_ppc","text":"obj Stanfit object matrix replications, rows corresponding samples columns corresponding variables (nrow(id) columns). id Dataframe linking index obj (Patient, Time) pairs, cf. output get_index(). patient_id Patient ID. max_score (Optional) Maximum value score can take. plot_*_traj_pmf set support supplied. plot_*_traj_fanchart set y axis range. plot_ppc_traj_* check content train test. support Values discrete distribution can take. Can NULL, case support pmf estimated data (cf. HuraultMisc::extract_distribution()). max_scale Maximum value legend display. NA, chosen automatically. interval Type confidence interval display, one \"eti\" equal-tailed intervals \"hdi\" highest density interval. CI_level Vector confidence level plot fanchart. ... arguments pass plot_post_traj_*. plot_post_traj_fanchart(), arguments pass add_fanchart(). train Training dataset used obtain fit. test Testing dataset used obtain fit (can NULL).","code":""},{"path":"/reference/plot_ppc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot posterior predictive trajectory — plot_ppc","text":"Ggplot","code":""},{"path":"/reference/plot_transition_MC.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain expected transition matrix — plot_transition_MC","title":"Markov Chain expected transition matrix — plot_transition_MC","text":"Markov Chain expected transition matrix","code":""},{"path":"/reference/plot_transition_MC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain expected transition matrix — plot_transition_MC","text":"","code":"plot_transition_MC(fit, max_scale = NA, show_text = FALSE)"},{"path":"/reference/plot_transition_MC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain expected transition matrix — plot_transition_MC","text":"fit Stanfit object corresponding Markov Chain model max_scale Maximum value legend display. NA, chosen automatically. show_text Whether display probability text heatmap.","code":""},{"path":"/reference/plot_transition_MC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain expected transition matrix — plot_transition_MC","text":"Ggplot","code":""},{"path":"/reference/prepare_standata.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare the data list to pass to the Stan sampler — prepare_standata","title":"Prepare the data list to pass to the Stan sampler — prepare_standata","text":"Used internally.","code":""},{"path":"/reference/prepare_standata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare the data list to pass to the Stan sampler — prepare_standata","text":"","code":"prepare_standata(model, train, test, ...)  prepare_data_lgtd(train, test = NULL, max_score, discrete)"},{"path":"/reference/prepare_standata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare the data list to pass to the Stan sampler — prepare_standata","text":"model Object train Training dataframe (details format EczemaFit()) test Testing dataframe (details format EczemaFit()) ... Arguments pass methods max_score Maximum value score can take discrete Whether use discrete normal distribution (relevant testing)","code":""},{"path":"/reference/prepare_standata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare the data list to pass to the Stan sampler — prepare_standata","text":"List serve input Stan sampler. list usually incomplete needs optional parameters, : run (binary, main MC models, indicating whether evaluate likelihood)","code":""},{"path":"/reference/prepare_standata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare the data list to pass to the Stan sampler — prepare_standata","text":"prepare_data_lgtd helps build prepare_standata.EczemaModel kept compatibility reasons. list outputs include priors.","code":""},{"path":"/reference/print.EczemaModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print model — print.EczemaModel","title":"Print model — print.EczemaModel","text":"Print model","code":""},{"path":"/reference/print.EczemaModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print model — print.EczemaModel","text":"","code":"# S3 method for EczemaModel print(x, digits = 2, ...)"},{"path":"/reference/print.EczemaModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print model — print.EczemaModel","text":"x Object class EczemaModel digits Number significant digits print ... Arguments pass print_prior()","code":""},{"path":"/reference/print.EczemaModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print model — print.EczemaModel","text":"None","code":""},{"path":"/reference/print_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Print prior distribution — print_prior","title":"Print prior distribution — print_prior","text":"Used internally print.EczemaModel method.","code":""},{"path":"/reference/print_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print prior distribution — print_prior","text":"","code":"print_prior(model, ...)  print_distribution(parameter_name, distribution_name, arguments, digits = 2)"},{"path":"/reference/print_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print prior distribution — print_prior","text":"model Object ... Arguments pass methods parameter_name Name parameter distribution_name Name distribution arguments Arguments distribution (numeric vector) digits Number significant digits print (cf. base::signif())","code":""},{"path":"/reference/print_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print prior distribution — print_prior","text":"None","code":""},{"path":"/reference/print_prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print prior distribution — print_prior","text":"print_prior usually calls print_distribution additional argument digits (except base method EczemaModel object).","code":""},{"path":"/reference/print_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print prior distribution — print_prior","text":"","code":"model <- EczemaModel(\"BinRW\", max_score = 10) print_prior(model) #> - sigma ~ normal+(0,0.4) #> - mu_logit_y0 ~ normal(0,1) #> - sigma_logit_y0 ~ normal(0,1.5) print_prior(model, digits = 5) #> - sigma ~ normal+(0,0.40236) #> - mu_logit_y0 ~ normal(0,1) #> - sigma_logit_y0 ~ normal(0,1.5) print_distribution(\"x\", \"normal\", c(0, 1)) #> - x ~ normal(0,1)"},{"path":"/reference/replace_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace prior — replace_prior","title":"Replace prior — replace_prior","text":"Used internally overwrite default prior constructor. Beware validity new prior tested function, may want call validate_prior() using function.","code":""},{"path":"/reference/replace_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace prior — replace_prior","text":"","code":"replace_prior(x, prior = NULL)"},{"path":"/reference/replace_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace prior — replace_prior","text":"x EczemaModel object prior Named list model's prior replace. NULL, prior stays ","code":""},{"path":"/reference/replace_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace prior — replace_prior","text":"Object class x","code":""},{"path":"/reference/replace_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace prior — replace_prior","text":"","code":"model <- EczemaModel(\"OrderedRW\", max_score = 5) print(model) #> OrderedRW model (discrete) #> max_score = 5  #> Prior:  #> - delta ~ dirichlet(2,2,2,2) #> - sigma_meas / max_score ~ lognormal(-2.3,0.69) #> - sigma_lat / max_score ~ lognormal(-2.3,0.69) #> - mu_y0 / max_score ~ normal(0.5,0.25) #> - sigma_y0 / max_score ~ normal+(0,0.12) replace_prior(model, prior = list(sigma = c(0, 1))) #> Warning: The following parameters do not exist or their priors do not need to be specified: sigma #> OrderedRW model (discrete) #> max_score = 5  #> Prior:  #> - delta ~ dirichlet(2,2,2,2) #> - sigma_meas / max_score ~ lognormal(-2.3,0.69) #> - sigma_lat / max_score ~ lognormal(-2.3,0.69) #> - mu_y0 / max_score ~ normal(0.5,0.25) #> - sigma_y0 / max_score ~ normal+(0,0.12)"},{"path":"/reference/sample_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior predictive distribution — sample_prior","title":"Prior predictive distribution — sample_prior","text":"Prior predictive distribution","code":""},{"path":"/reference/sample_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior predictive distribution — sample_prior","text":"","code":"sample_prior(model, ...)  # S3 method for EczemaModel sample_prior(model, N_patient = 1, t_max = c(2), ...)  # S3 method for MC sample_prior(   model,   data = data.frame(y0 = integer(), y1 = integer(), dt = integer()),   ... )"},{"path":"/reference/sample_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior predictive distribution — sample_prior","text":"model Object ... Arguments pass rstan::sampling() N_patient Number patients simulate t_max Vector size N_patient indicating time-series length patient data Dataframe (see details ). columns y0 dt relevant simulate data .","code":""},{"path":"/reference/sample_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior predictive distribution — sample_prior","text":"Object class stanfit","code":""},{"path":"/reference/sample_prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior predictive distribution — sample_prior","text":"","code":"if (FALSE) { model <- EczemaModel(\"BinRW\", max_score = 100) sample_prior(model) } if (FALSE) { model <- EczemaModel(\"MC\", K = 5) sample_prior(model) }"},{"path":"/reference/samples_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Process samples to a list that can be included to a dataframe — samples_to_list","title":"Process samples to a list that can be included to a dataframe — samples_to_list","text":"Process samples list can included dataframe","code":""},{"path":"/reference/samples_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process samples to a list that can be included to a dataframe — samples_to_list","text":"","code":"samples_to_list(object, par_name = \"y_pred\", n_samples = NULL)"},{"path":"/reference/samples_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process samples to a list that can be included to a dataframe — samples_to_list","text":"object Stanfit object containing variable par_name matrix rows representing samples, columns representing variables. par_name Name variable extract object stanfit object. Default \"y_pred\" (variable containing predictions). n_samples many samples return. Default (=NULL) samples.","code":""},{"path":"/reference/samples_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process samples to a list that can be included to a dataframe — samples_to_list","text":"List vector samples","code":""},{"path":"/reference/samples_to_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process samples to a list that can be included to a dataframe — samples_to_list","text":"","code":"samples_to_list(matrix(rnorm(1e3), nrow = 1e2)) #> [[1]] #>   [1] -1.885182210  1.485105629 -1.409276775 -1.264273327 -1.116836503 #>   [6] -0.606148294  1.052341793  2.703803826 -1.231752234  0.574650154 #>  [11] -0.867083875  1.294509378 -0.277401449 -0.423005668 -0.444667479 #>  [16]  0.698511833 -1.220886545  0.417633585  2.653131735  1.443847730 #>  [21]  0.292958229  0.415582028 -0.480793381  0.611136834 -1.354127091 #>  [26]  0.008165982  0.063951847 -0.678440573 -0.894198702  0.996269585 #>  [31] -0.228075754  1.046937379 -0.729782153  0.421128342  1.023689672 #>  [36]  0.663597986 -0.065235086 -1.379501641  0.406370310 -0.671915292 #>  [41]  0.570893481 -0.190722809 -1.382687907 -0.417600275 -1.836224625 #>  [46] -0.776087496  1.212265977 -0.328009862  0.290032097  0.609304700 #>  [51] -1.263316070 -1.608600694 -2.252128727 -0.557479608 -1.170584092 #>  [56]  0.090016290  1.083716601 -0.767988597 -0.389547599  1.295696961 #>  [61]  0.997376046  0.039803670  0.712188498  0.493212825 -0.900669061 #>  [66]  0.040815423  0.734572468  1.980806312  0.275609400 -0.987717454 #>  [71] -0.913698036 -0.731226916  0.051657911  1.017777398 -0.558320053 #>  [76]  0.417023692 -0.077186503 -0.403291076  0.314777374  0.740077907 #>  [81]  1.368782011  1.169922394  2.510816011 -1.135979048 -1.035556492 #>  [86] -0.633043971  0.927324201  0.382202717  2.048867130 -0.786858525 #>  [91]  1.542581014  0.099938762  0.356749480 -0.914530830  0.594297097 #>  [96] -0.567070551 -2.385654854  0.794389081  0.691848129  0.755027049 #>  #> [[2]] #>   [1] -0.079569075 -0.357340899 -0.005912703  0.260379148  1.040858241 #>   [6] -1.189013786  0.853000565 -0.266470528 -0.359544340  0.460420773 #>  [11]  1.009677687 -0.732564657  0.039160230  1.838926035  1.583506067 #>  [16]  1.350733405 -0.676214270 -1.886787252  0.228617389  1.033223751 #>  [21] -1.192859948 -1.128250471 -0.089524133 -0.090524225  0.189735394 #>  [26] -0.714459653  1.237599744 -2.003873208  1.241366481 -0.196531104 #>  [31] -0.524328733 -1.237618905  1.661563505  0.771291699 -1.029744501 #>  [36]  0.047775816 -0.590238675  0.494290809 -0.351905633 -0.635511153 #>  [41] -0.390074926  1.244012102 -0.028429389  0.329241560 -0.858507647 #>  [46] -1.656271456  0.649955424  1.274596015 -1.785577716  0.623895080 #>  [51]  0.444014002  0.350660781 -0.807652159 -0.605021692  0.697781599 #>  [56] -0.031141958  0.247677475  0.600882066  0.439687697 -0.836108168 #>  [61]  0.316780657  0.444698007  0.004971021 -1.207579309  0.432889114 #>  [66]  1.298635205  0.611055229  2.546062895  0.758101927  0.344185388 #>  [71] -1.156977123 -0.384422508  1.119530546 -0.608891649  0.466645346 #>  [76] -0.139423348  0.264246422  0.788224799 -1.706713389 -1.876012604 #>  [81]  0.325638995 -0.625151913 -1.441009137  2.621596253  0.434057591 #>  [86]  1.300752250  0.970186169  0.542455909 -1.169924554  1.600069698 #>  [91] -0.845653584 -0.554268732  0.689870631  0.192119935  0.808481629 #>  [96]  0.871194191 -2.411271022 -1.061411448  2.092406721  0.294674823 #>  #> [[3]] #>   [1] -0.70022267  0.73920842  0.45318641 -1.46165997 -0.16419907 -0.60340079 #>   [7]  0.80006592 -1.57763840  1.59642912  0.68955281 -0.55477906  0.65221753 #>  [13]  1.04899717 -0.86231466  1.85930896  0.15371554 -1.23707155 -1.54220997 #>  [19] -1.52653228 -0.30696845 -0.47466047  0.03917443 -0.66133654 -0.42859914 #>  [25]  1.42768151  0.85754397  1.29908716 -2.16486793  0.81835090 -0.26274494 #>  [31]  0.45022697  0.10515939 -0.23074925 -0.62950216  1.13286042  0.49975901 #>  [37] -0.83832600 -0.96057558  0.40600496  0.98271214  1.62902751  0.30594422 #>  [43] -0.93197288 -0.30972745 -0.26536897 -0.05596398  1.32663592 -1.05085954 #>  [49]  0.13800123  2.20205347 -0.03470886  1.13161017 -1.01291708 -1.58138542 #>  [55]  1.29294792  0.12734320 -1.60284719 -0.66075517  0.85036568  0.36241109 #>  [61] -0.05875674  1.95357644 -0.04062259  1.01101108 -0.06566995  0.52427448 #>  [67]  0.55956117  0.81802062  1.66279832  1.53185481 -0.93657454  0.15133578 #>  [73] -0.69663494  0.65645164 -0.79550805 -1.08189505 -0.47826561  0.97378726 #>  [79]  1.05856173 -0.33791268  1.25657327 -0.34675041 -1.08670773 -0.56801224 #>  [85]  0.21511185 -0.49592932  0.68928334  0.33877736 -0.76979331 -1.04958441 #>  [91] -0.74481945 -0.19531328  1.27199989 -0.32259585 -0.12063043 -0.02544976 #>  [97]  0.15553939  0.96873271  1.00349685 -2.08212558 #>  #> [[4]] #>   [1]  0.64585281  0.34602423  0.26857316 -0.09970610 -0.50137944 -0.62120538 #>   [7] -1.26875484  0.17900096  0.07804341  0.23067173  0.68900028  0.95525708 #>  [13] -2.14835191  0.53057603 -0.06678455  0.12570083 -0.28682257  0.47131915 #>  [19] -1.79689020  0.08535018  1.46847025  1.02469389 -2.70108694  0.27185985 #>  [25] -0.33438377 -1.65623074 -0.05527014 -0.38699272 -0.39998556 -0.38380616 #>  [31] -1.66614632  0.01511392  0.97585784  0.34593748 -0.84958935  0.57138192 #>  [37] -1.18892661  1.25698354  0.27402202 -0.37438611  0.97570634 -1.82770901 #>  [43] -0.52157040  0.88496492 -0.43743027 -0.20434397 -0.43577216  0.48519445 #>  [49] -0.14143107 -0.39534904  1.58067706  0.86032206  0.55404556  0.13718514 #>  [55] -0.71796052  1.61253865  0.24786470 -0.87294116 -1.03067565  1.48527591 #>  [61]  1.36583998  0.88339244 -0.90761500  0.35475204 -0.80623503  0.46025516 #>  [67] -0.13247367  1.36656879 -1.50903090 -0.93240515 -1.03975938  0.57843068 #>  [73] -0.88461775  0.02805359  0.76261731  1.47735930  0.03287525  0.70378889 #>  [79]  1.14170332 -0.01035263 -0.83896767 -1.38182287  0.49380602  1.34441430 #>  [85]  1.02662218  0.37495700  0.49899591 -2.18476523  1.24611269 -1.12259640 #>  [91]  0.10581760 -1.14064360  0.24539688 -1.99551426  0.81935467  0.14382902 #>  [97]  0.21778939  0.06851911  2.90911575  0.04372531 #>  #> [[5]] #>   [1] -2.03435460  1.22187780  0.41352832 -0.74435114  1.49982101  2.63006841 #>   [7]  2.34025844  1.00818135 -0.22858542  0.71226621 -0.48273615  0.09478431 #>  [13] -0.15878734  1.07128093  0.11236398  1.93707352 -1.60300480 -1.83244963 #>  [19] -0.06934179  0.90733976 -0.74827256  1.71954846 -1.98166990  0.81408961 #>  [25]  0.34367086 -0.28736719 -0.96758373 -2.76192283 -0.82892680 -0.92627071 #>  [31] -2.80229907 -0.50536198 -0.34303890 -0.62494203  0.47913881  0.39288860 #>  [37]  1.04944303  1.50262445  0.25465166 -1.48050594  0.62418032  0.99160197 #>  [43]  0.47319546 -0.21030071 -0.91924223  0.15502744  1.62080324 -0.18033604 #>  [49]  0.15280566 -0.67742608 -0.16566342  0.28986639  1.04008158 -0.27458659 #>  [55]  0.71446511 -0.32770891  2.57926739  0.51784090 -0.81237376  2.24004318 #>  [61]  0.57392446 -0.24419747  0.36469388  0.47848639 -0.74741509 -0.58580498 #>  [67]  0.81984989 -0.68913350  0.67861801  0.63313145 -1.26938774 -0.43311584 #>  [73]  1.05673363  2.17221597  0.38924272  0.24855281 -1.37060954 -1.13953214 #>  [79]  0.29004423  0.18658272 -1.07630010 -0.43726629  0.38338733  0.59828260 #>  [85]  0.20830616  1.40212242 -1.19585221 -1.43146305  0.55635863 -0.83940300 #>  [91]  0.57388077  0.78154562  0.84100003 -0.01878956  0.79153663  1.16131117 #>  [97] -2.10546294 -0.24957478  0.82966382 -0.62701578 #>  #> [[6]] #>   [1]  0.879523511  0.545333630 -0.019001299 -0.945680689 -0.576730396 #>   [6] -0.207042581  0.336817925  0.298815255  0.108870259  1.598633821 #>  [11] -0.831500086 -0.936120220 -0.892454622  0.763323551  0.485710112 #>  [16]  0.353483964  0.979249607 -1.253620802 -1.781204648 -0.241597305 #>  [21]  0.366877697 -0.981608482 -2.133639750  0.565177869  0.356414560 #>  [26]  0.941147432 -0.706161599  1.036431170 -0.503635040  0.160716009 #>  [31] -0.792661186 -1.451544063  2.209182665  0.913431821  0.267468854 #>  [36] -1.091500624  1.187091207  0.313880515 -1.016363889 -0.683341213 #>  [41]  0.277859440  1.017499482 -0.148002370  0.152928961  1.478002812 #>  [46] -0.545550192  0.406422378  2.000152894  0.346622456 -0.203976399 #>  [51]  0.908102663 -1.067338448 -0.129707548 -0.079325698  0.470661758 #>  [56]  0.258019081 -0.600750361 -1.818119025 -0.961900162  0.080790497 #>  [61] -0.616233616 -0.660061788 -1.274224168  1.203963447  1.215426163 #>  [66]  0.197249018 -0.912645937 -0.672906874  0.835836155 -0.757759067 #>  [71]  1.091721424  0.171217647 -0.643920002 -0.141601494  0.566006803 #>  [76] -0.997968658 -0.945871928 -1.333327537  1.422882148 -2.144413148 #>  [81] -0.157713459  0.208864019  0.398735412  0.254721293  0.603076925 #>  [86] -1.957453144  1.336658775 -0.292231777 -0.949667512 -0.725664483 #>  [91] -0.964688224  0.407766795  0.230652561 -0.002481081  0.163327006 #>  [96] -0.531545759 -1.150778455 -0.839336863  0.047613558 -0.623317847 #>  #> [[7]] #>   [1]  0.564940697  1.870197677 -0.903672639  0.569737515  1.342271978 #>   [6] -1.695259958  0.878230142  1.538807622 -0.218224055  0.021311855 #>  [11] -0.261843203 -0.773387544 -1.034177314  0.239601944  0.436251248 #>  [16]  0.946562330  0.566989690 -0.683188133 -2.120194934  0.392399537 #>  [21]  0.488346226 -0.643152393  0.366685188 -0.349584368  1.811511491 #>  [26]  0.393995928 -1.669623364 -0.209687367  0.607540693 -2.442213660 #>  [31] -0.805658553 -0.487432382 -0.897161781  0.881141938 -0.725634256 #>  [36]  0.140559749  1.774539240  0.658900095 -0.188181089  0.123445719 #>  [41]  0.742210635  0.012199201  0.650342159  0.804621820 -0.966893835 #>  [46] -1.789950834 -2.285816677  0.598471966 -0.271087890 -0.861005884 #>  [51]  0.436631716 -1.678770784 -0.903780822  2.039974325  0.191768154 #>  [56]  0.422037205  1.425104590 -0.017557913  0.417568168 -0.053184152 #>  [61] -1.586748363  0.073071469  0.475058812  2.426402951 -0.325803092 #>  [66] -0.188479727 -2.413689381  0.960841194 -1.787189053  0.591219171 #>  [71]  0.292244219  1.353687996 -1.520739268 -0.463780281 -2.025791111 #>  [76] -0.419603495 -0.181850664  0.891754322 -0.100053621 -0.031201893 #>  [81]  0.198322759 -2.421440561  0.727534559  0.312976583 -0.826169454 #>  [86] -0.014622325  0.112393451  0.265332731 -0.300193340 -0.005004081 #>  [91]  1.675171431 -2.205185337 -1.827085941 -0.142974952 -0.825564089 #>  [96] -0.860903872 -0.898814062 -0.735604073 -0.072757355 -0.918872963 #>  #> [[8]] #>   [1] -0.22173494 -0.02754112 -1.66895864  0.73250240  0.14242400  2.03653985 #>   [7] -0.47332138 -0.14071364  0.17711375 -0.72550574  0.72479654  0.09554315 #>  [13] -0.62988079 -1.16235121 -0.46730166  2.19778896 -0.02471908  1.40222789 #>  [19]  1.23910645  1.18630829  1.58123794  0.48236966  1.59533335 -0.40371451 #>  [25]  0.20994043  0.38356497  0.13491488 -0.46903500 -0.99382491 -0.10698836 #>  [31] -1.93762832 -0.33836235  1.23881989 -0.81765733  1.14633687  0.42427250 #>  [37] -0.20783742 -0.13062761 -0.87668355  0.52088069  1.75113462 -0.14483898 #>  [43] -0.56127748  0.01921659 -3.03553722 -0.30233090 -0.54617002 -0.43411019 #>  [49]  0.94111873 -0.35410199  0.81961618 -0.35340102  0.65801836 -0.31289560 #>  [55] -0.44623718 -0.71042634  1.35424596 -0.86773765  0.28505023 -0.27796537 #>  [61]  1.50830628  0.13615927 -1.37686683 -0.25690785 -0.17857491  1.08615165 #>  [67]  0.78906536  0.13355519 -0.19135911  1.44391378 -0.59015169 -0.12058176 #>  [73]  0.61983000 -1.43810370  0.36712627  0.34588068 -2.03642093 -1.56410927 #>  [79] -0.32017508  2.02194998  0.51166897  1.04765877  0.23914818  1.53216967 #>  [85]  0.62830540  0.40941735 -0.07610928 -1.03404306 -0.08620944  0.15598272 #>  [91]  0.19767442 -0.63487460  1.62210313  0.74848509 -0.90447760 -0.82251136 #>  [97] -1.80200134  1.12813425 -0.33608343  0.18396453 #>  #> [[9]] #>   [1] -0.430358149  0.067115160  1.066261334 -0.513929737 -0.442503802 #>   [6]  1.423342676 -1.110745460 -1.460603316 -1.104862706  1.543810991 #>  [11]  0.075517566  1.364027545  1.165429895 -0.738057756  0.639732143 #>  [16]  1.065551700  0.078646671  0.471813129  0.505330085 -0.945990526 #>  [21]  0.509230957 -0.305771856  1.088550786 -0.570355446 -1.214357573 #>  [26] -0.102892876 -0.014228219  1.460418538  0.561713902 -0.228537291 #>  [31]  1.316174414 -0.368246287  0.690790457 -0.087100285 -1.899492929 #>  [36]  0.252593800 -0.309752623  0.158315387  0.924046946  0.753585453 #>  [41] -0.485395666  0.359642318 -0.431370317 -0.205457263 -1.518699120 #>  [46] -1.211109525  0.287891608 -2.238908768 -1.540904940  2.108437245 #>  [51]  0.251262514 -0.900152629 -0.319146951 -0.437684745  0.110136732 #>  [56]  0.512480900 -2.006250883  0.002062205 -0.058008295  0.855118266 #>  [61]  0.579701319 -1.718023419  0.673652500  0.208317584  0.410008945 #>  [66]  0.889257244 -0.341292755 -0.821948038 -0.587377854 -0.154391876 #>  [71]  0.011907158 -3.818226503 -1.225663959  0.289908563 -0.304752707 #>  [76]  0.803623695 -0.383241046 -0.151244278  1.260709741 -1.021518755 #>  [81]  0.318245580  0.114133408  1.048249767  0.664555363  1.003005242 #>  [86] -0.624877065 -0.249388611 -0.332908030 -0.329281459 -1.462578483 #>  [91] -1.327308076 -0.482600203 -0.438577428  0.249063791 -0.688772346 #>  [96]  0.698595638 -0.824830541 -0.385536317 -0.678549382 -0.127472943 #>  #> [[10]] #>   [1]  0.572242340  0.225426410 -0.111652316  1.038766304 -1.466892749 #>   [6]  0.124148121 -0.262233190  0.913772707 -0.775964879 -1.129281916 #>  [11] -1.154179655 -0.609612940 -0.814947310  0.961700663 -0.226345613 #>  [16]  0.586481422  0.704025800  0.154287797 -1.435837325 -1.174066080 #>  [21] -0.957994124 -0.644200596  0.182096221 -0.126896221  2.217299043 #>  [26] -0.618023279 -0.891732843  0.733735810 -1.238245665  0.204431211 #>  [31] -0.293852734 -1.417239224  1.613021742 -1.132934488 -0.479075780 #>  [36] -1.219403075 -0.385326305 -0.389775233  0.277285977  1.241678046 #>  [41]  1.026919591  0.003394658 -0.339272378  1.412783243  1.271441293 #>  [46]  2.335385593 -0.896087555  0.769887213  1.016389930  0.560748449 #>  [51] -2.975959115  1.133730972 -0.140103733 -0.676420319 -0.356788035 #>  [56]  1.876413735  1.312576995 -0.302971145  0.825505656  0.570664669 #>  [61]  1.815765648  0.003291955 -0.716833898 -0.468821391  2.552609838 #>  [66]  1.569221987 -0.154383930 -0.295184085  0.864414651  0.938340156 #>  [71] -0.937839280  2.632410087  2.067485792  2.120436673  1.307755508 #>  [76] -1.339179109  0.849612943  0.021527915 -0.341157148 -0.948062934 #>  [81]  0.152846422 -0.665904151 -0.903053563  0.926736233  0.923703275 #>  [86] -2.185556916  0.329298719  0.449028925  0.783230092 -1.028181035 #>  [91]  0.662845829  0.412419165 -0.785187936  0.142948349 -1.685319253 #>  [96] -0.143000718  0.692051770  0.811635611  0.577751854  1.444913627 #>"},{"path":"/reference/validate_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the prior of an EczemaModel is correct — validate_prior","title":"Check the prior of an EczemaModel is correct — validate_prior","text":"Used internally constructing EczemaModel.","code":""},{"path":"/reference/validate_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the prior of an EczemaModel is correct — validate_prior","text":"","code":"validate_prior(model, ...)"},{"path":"/reference/validate_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the prior of an EczemaModel is correct — validate_prior","text":"model Object ... Arguments pass methods","code":""},{"path":"/reference/validate_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the prior of an EczemaModel is correct — validate_prior","text":"NULL statements TRUE, otherwise error message","code":""},{"path":[]},{"path":"/news/index.html","id":"eczemapred-030","dir":"Changelog","previous_headings":"","what":"EczemaPred 0.3.0","title":"EczemaPred 0.3.0","text":"Add plotting helpers add_fanchart() add_broken_pointline() Allow discrete input MixedAR1 Refactor tests Minor bug fixes refactoring","code":""},{"path":"/news/index.html","id":"eczemapred-020","dir":"Changelog","previous_headings":"","what":"EczemaPred 0.2.0","title":"EczemaPred 0.2.0","text":"Reparametrise OrderedRW model","code":""},{"path":"/news/index.html","id":"eczemapred-011","dir":"Changelog","previous_headings":"","what":"EczemaPred 0.1.1","title":"EczemaPred 0.1.1","text":"Post publication release Update README, workflows Add citation file Combine RW, Smoothing AR1 single Stan model, thus reducing compilation time installation allowing discrete input Smoothing AR1 Minor bug fixes","code":""},{"path":"/news/index.html","id":"eczemapred-010","dir":"Changelog","previous_headings":"","what":"EczemaPred 0.1.0","title":"EczemaPred 0.1.0","text":"Initial release","code":""}]
